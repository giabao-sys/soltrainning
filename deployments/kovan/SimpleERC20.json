{
  "address": "0x8a4Db16D0e861C5bfD2c163a28Ef36a17ba5b5A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TOTAL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1263c151dedaa172c5bdd4d26662f240e8ad6b4f6a36929bbde82aa3de2cf7b",
  "receipt": {
    "to": null,
    "from": "0x46bEC8B77d117fDC69b0681c3697a81B43585C8b",
    "contractAddress": "0x8a4Db16D0e861C5bfD2c163a28Ef36a17ba5b5A3",
    "transactionIndex": 3,
    "gasUsed": "1527651",
    "logsBloom": "0x
    "blockHash": "0x991fd090178293825b6b76fa74dd1bf36fd0130a610dfb934f85751e03f07e95",
    "transactionHash": "0xa1263c151dedaa172c5bdd4d26662f240e8ad6b4f6a36929bbde82aa3de2cf7b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 29736476,
        "transactionHash": "0xa1263c151dedaa172c5bdd4d26662f240e8ad6b4f6a36929bbde82aa3de2cf7b",
        "address": "0x8a4Db16D0e861C5bfD2c163a28Ef36a17ba5b5A3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046bec8b77d117fdc69b0681c3697a81b43585c8b"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x991fd090178293825b6b76fa74dd1bf36fd0130a610dfb934f85751e03f07e95"
      }
    ],
    "blockNumber": 29736476,
    "cumulativeGasUsed": "1743883",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "SERC20",
    "SimpleERC20",
    "1000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9c1ada410e6c472eae1dc6ef1f2e8435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,uint256)\":{\"params\":{\"_to\":\"The address of the recipient\",\"_value\":\"the amount to send\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"_from\":\"The address of the sender\",\"_to\":\"The address of the recipient\",\"_value\":\"the amount to send\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"allowance\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"balanceOf\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transfer(address,uint256)\":{\"notice\":\"Transfer tokens Send `_value` tokens to `_to` from your account\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer tokens from other address Send `_value` tokens to `_to` on behalf of `_from`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20/BaoPG/ERC20.sol\":\"SimpleERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ERC20/BaoPG/ERC20.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SimpleERC20 is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string public symbol;\\n    string public  name;\\n\\n    uint256 public constant decimals = 12;\\n    uint256 public override totalSupply;\\n    uint256 public constant MAX_TOTAL_SUPPLY = 1000 * 10 ** uint256(decimals);\\n    address public minter;\\n\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    constructor(string memory initSymbol, string memory initName, uint256 initialSupply) {\\n        require(initialSupply<= MAX_TOTAL_SUPPLY);\\n        require(initialSupply > 0);\\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\\n        name = initName;                                   // Set the name for display purposes\\n        symbol = initSymbol;                               // Set the symbol for display purposes\\n        minter = msg.sender;\\n    }\\n\\n    function setMinter(address _minter) onlyOwner external returns (bool) {\\n        minter = _minter;\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) external override returns (bool) {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /** shared logic for transfer and transferFrom */\\n    function _transfer(address _from, address _to, uint256 _value) internal {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0), \\\"Invalid address\\\");\\n        // Check if the sender has enough\\n        require(balanceOf[_from] >= _value, \\\"Insufficient balance\\\");\\n\\n        // Subtract from the sender\\n        balanceOf[_from] = balanceOf[_from].sub(_value);\\n        // Add the same to the recipient\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\n        emit Transfer(_from, _to, _value);\\n    }\\n\\n    /**\\n     * Transfer tokens\\n     *\\n     * Send `_value` tokens to `_to` from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transfer(address _to, uint256 _value) public override returns (bool) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Transfer tokens from other address\\n     *\\n     * Send `_value` tokens to `_to` on behalf of `_from`\\n     *\\n     * @param _from The address of the sender\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool)\\n    {\\n        require(_value <= allowance[_from][msg.sender], \\\"Insufficient allowance\\\");     // Check allowance\\n        uint256 allowed = allowance[_from][msg.sender];\\n        allowance[_from][msg.sender] = allowed.sub(_value);\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _value) external returns (bool) {\\n        require(msg.sender == minter);\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\n        totalSupply = totalSupply.add(_value);\\n        require(MAX_TOTAL_SUPPLY >= totalSupply);\\n        emit Transfer(address(0), _to, _value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2453c4e5648d3a038a3905034c3700aaa6779cdb0e6f64214a56abf1ab7f6b36\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001f8d38038062001f8d83398181016040528101906200003791906200037b565b620000576200004b6200017660201b60201c565b6200017e60201b60201c565b600c600a620000679190620004bd565b6103e8620000769190620005fa565b8111156200008357600080fd5b600081116200009157600080fd5b600c600a620000a19190620004bd565b81620000ae9190620005fa565b600381905550600354600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600290805190602001906200011292919062000242565b5082600190805190602001906200012b92919062000242565b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620007cc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805462000250906200069b565b90600052602060002090601f016020900481019282620002745760008555620002c0565b82601f106200028f57805160ff1916838001178555620002c0565b82800160010185558215620002c0579182015b82811115620002bf578251825591602001919060010190620002a2565b5b509050620002cf9190620002d3565b5090565b5b80821115620002ee576000816000905550600101620002d4565b5090565b60006200030962000303846200042c565b62000403565b9050828152602081018484840111156200032257600080fd5b6200032f84828562000665565b509392505050565b600082601f8301126200034957600080fd5b81516200035b848260208601620002f2565b91505092915050565b6000815190506200037581620007b2565b92915050565b6000806000606084860312156200039157600080fd5b600084015167ffffffffffffffff811115620003ac57600080fd5b620003ba8682870162000337565b935050602084015167ffffffffffffffff811115620003d857600080fd5b620003e68682870162000337565b9250506040620003f98682870162000364565b9150509250925092565b60006200040f62000422565b90506200041d8282620006d1565b919050565b6000604051905090565b600067ffffffffffffffff8211156200044a576200044962000765565b5b620004558262000794565b9050602081019050919050565b6000808291508390505b6001851115620004b4578086048111156200048c576200048b62000707565b5b60018516156200049c5780820291505b8081029050620004ac85620007a5565b94506200046c565b94509492505050565b6000620004ca826200065b565b9150620004d7836200065b565b9250620005067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200050e565b905092915050565b600082620005205760019050620005f3565b81620005305760009050620005f3565b816001811462000549576002811462000554576200058a565b6001915050620005f3565b60ff84111562000569576200056862000707565b5b8360020a91508482111562000583576200058262000707565b5b50620005f3565b5060208310610133831016604e8410600b8410161715620005c45782820a905083811115620005be57620005bd62000707565b5b620005f3565b620005d3848484600162000462565b92509050818404811115620005ed57620005ec62000707565b5b81810290505b9392505050565b600062000607826200065b565b915062000614836200065b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000650576200064f62000707565b5b828202905092915050565b6000819050919050565b60005b838110156200068557808201518184015260208101905062000668565b8381111562000695576000848401525b50505050565b60006002820490506001821680620006b457607f821691505b60208210811415620006cb57620006ca62000736565b5b50919050565b620006dc8262000794565b810181811067ffffffffffffffff82111715620006fe57620006fd62000765565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b620007bd816200065b565b8114620007c957600080fd5b50565b6117b180620007dc6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146102a1578063dd62ed3e146102d1578063f2fde38b14610301578063fca3b5aa1461031d57610100565b806370a082311461022b578063715018a61461025b5780638da5cb5b1461026557806395d89b411461028357610100565b806323b872dd116100d357806323b872dd1461018f578063313ce567146101bf57806333039d3d146101dd57806340c10f19146101fb57610100565b806306fdde03146101055780630754617214610123578063095ea7b31461014157806318160ddd14610171575b600080fd5b61010d61034d565b60405161011a91906111e3565b60405180910390f35b61012b6103db565b60405161013891906111ad565b60405180910390f35b61015b6004803603810190610156919061105c565b610401565b60405161016891906111c8565b60405180910390f35b6101796104f3565b60405161018691906112a5565b60405180910390f35b6101a960048036038101906101a4919061100d565b6104f9565b6040516101b691906111c8565b60405180910390f35b6101c76106e5565b6040516101d491906112a5565b60405180910390f35b6101e56106ea565b6040516101f291906112a5565b60405180910390f35b6102156004803603810190610210919061105c565b610708565b60405161022291906111c8565b60405180910390f35b61024560048036038101906102409190610fa8565b6108ad565b60405161025291906112a5565b60405180910390f35b6102636108c5565b005b61026d61094d565b60405161027a91906111ad565b60405180910390f35b61028b610976565b60405161029891906111e3565b60405180910390f35b6102bb60048036038101906102b6919061105c565b610a04565b6040516102c891906111c8565b60405180910390f35b6102eb60048036038101906102e69190610fd1565b610a1b565b6040516102f891906112a5565b60405180910390f35b61031b60048036038101906103169190610fa8565b610a40565b005b61033760048036038101906103329190610fa8565b610b38565b60405161034491906111c8565b60405180910390f35b6002805461035a906115ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610386906115ac565b80156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050505081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104e191906112a5565b60405180910390a36001905092915050565b60035481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190611245565b60405180910390fd5b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061064e8382610c0090919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106d9858585610c16565b60019150509392505050565b600c81565b600c600a6106f89190611385565b6103e861070591906114a3565b81565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076457600080fd5b6107b682600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9c90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061080e82600354610e9c90919063ffffffff16565b600381905550600354600c600a6108259190611385565b6103e861083291906114a3565b101561083d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161089b91906112a5565b60405180910390a36001905092915050565b60056020528060005260406000206000915090505481565b6108cd610eb2565b73ffffffffffffffffffffffffffffffffffffffff166108eb61094d565b73ffffffffffffffffffffffffffffffffffffffff1614610941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093890611285565b60405180910390fd5b61094b6000610eba565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054610983906115ac565b80601f01602080910402602001604051908101604052809291908181526020018280546109af906115ac565b80156109fc5780601f106109d1576101008083540402835291602001916109fc565b820191906000526020600020905b8154815290600101906020018083116109df57829003601f168201915b505050505081565b6000610a11338484610c16565b6001905092915050565b6006602052816000526040600020602052806000526040600020600091509150505481565b610a48610eb2565b73ffffffffffffffffffffffffffffffffffffffff16610a6661094d565b73ffffffffffffffffffffffffffffffffffffffff1614610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390611285565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2390611225565b60405180910390fd5b610b3581610eba565b50565b6000610b42610eb2565b73ffffffffffffffffffffffffffffffffffffffff16610b6061094d565b73ffffffffffffffffffffffffffffffffffffffff1614610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90611285565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008183610c0e91906114fd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7d90611205565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cff90611265565b60405180910390fd5b610d5a81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0090919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610def81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9c90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e8f91906112a5565b60405180910390a3505050565b60008183610eaa91906112dc565b905092915050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610f8d8161174d565b92915050565b600081359050610fa281611764565b92915050565b600060208284031215610fba57600080fd5b6000610fc884828501610f7e565b91505092915050565b60008060408385031215610fe457600080fd5b6000610ff285828601610f7e565b925050602061100385828601610f7e565b9150509250929050565b60008060006060848603121561102257600080fd5b600061103086828701610f7e565b935050602061104186828701610f7e565b925050604061105286828701610f93565b9150509250925092565b6000806040838503121561106f57600080fd5b600061107d85828601610f7e565b925050602061108e85828601610f93565b9150509250929050565b6110a181611531565b82525050565b6110b081611543565b82525050565b60006110c1826112c0565b6110cb81856112cb565b93506110db818560208601611579565b6110e48161163c565b840191505092915050565b60006110fc600f836112cb565b91506111078261165a565b602082019050919050565b600061111f6026836112cb565b915061112a82611683565b604082019050919050565b60006111426016836112cb565b915061114d826116d2565b602082019050919050565b60006111656014836112cb565b9150611170826116fb565b602082019050919050565b60006111886020836112cb565b915061119382611724565b602082019050919050565b6111a78161156f565b82525050565b60006020820190506111c26000830184611098565b92915050565b60006020820190506111dd60008301846110a7565b92915050565b600060208201905081810360008301526111fd81846110b6565b905092915050565b6000602082019050818103600083015261121e816110ef565b9050919050565b6000602082019050818103600083015261123e81611112565b9050919050565b6000602082019050818103600083015261125e81611135565b9050919050565b6000602082019050818103600083015261127e81611158565b9050919050565b6000602082019050818103600083015261129e8161117b565b9050919050565b60006020820190506112ba600083018461119e565b92915050565b600081519050919050565b600082825260208201905092915050565b60006112e78261156f565b91506112f28361156f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611327576113266115de565b5b828201905092915050565b6000808291508390505b600185111561137c57808604811115611358576113576115de565b5b60018516156113675780820291505b80810290506113758561164d565b945061133c565b94509492505050565b60006113908261156f565b915061139b8361156f565b92506113c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846113d0565b905092915050565b6000826113e0576001905061149c565b816113ee576000905061149c565b8160018114611404576002811461140e5761143d565b600191505061149c565b60ff8411156114205761141f6115de565b5b8360020a915084821115611437576114366115de565b5b5061149c565b5060208310610133831016604e8410600b84101617156114725782820a90508381111561146d5761146c6115de565b5b61149c565b61147f8484846001611332565b92509050818404811115611496576114956115de565b5b81810290505b9392505050565b60006114ae8261156f565b91506114b98361156f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114f2576114f16115de565b5b828202905092915050565b60006115088261156f565b91506115138361156f565b925082821015611526576115256115de565b5b828203905092915050565b600061153c8261154f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561159757808201518184015260208101905061157c565b838111156115a6576000848401525b50505050565b600060028204905060018216806115c457607f821691505b602082108114156115d8576115d761160d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61175681611531565b811461176157600080fd5b50565b61176d8161156f565b811461177857600080fd5b5056fea26469706673582212206f22500aca0fe05910c236dc0d1d8a999cbe0894c99d20df42fc9555b8117ee564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146102a1578063dd62ed3e146102d1578063f2fde38b14610301578063fca3b5aa1461031d57610100565b806370a082311461022b578063715018a61461025b5780638da5cb5b1461026557806395d89b411461028357610100565b806323b872dd116100d357806323b872dd1461018f578063313ce567146101bf57806333039d3d146101dd57806340c10f19146101fb57610100565b806306fdde03146101055780630754617214610123578063095ea7b31461014157806318160ddd14610171575b600080fd5b61010d61034d565b60405161011a91906111e3565b60405180910390f35b61012b6103db565b60405161013891906111ad565b60405180910390f35b61015b6004803603810190610156919061105c565b610401565b60405161016891906111c8565b60405180910390f35b6101796104f3565b60405161018691906112a5565b60405180910390f35b6101a960048036038101906101a4919061100d565b6104f9565b6040516101b691906111c8565b60405180910390f35b6101c76106e5565b6040516101d491906112a5565b60405180910390f35b6101e56106ea565b6040516101f291906112a5565b60405180910390f35b6102156004803603810190610210919061105c565b610708565b60405161022291906111c8565b60405180910390f35b61024560048036038101906102409190610fa8565b6108ad565b60405161025291906112a5565b60405180910390f35b6102636108c5565b005b61026d61094d565b60405161027a91906111ad565b60405180910390f35b61028b610976565b60405161029891906111e3565b60405180910390f35b6102bb60048036038101906102b6919061105c565b610a04565b6040516102c891906111c8565b60405180910390f35b6102eb60048036038101906102e69190610fd1565b610a1b565b6040516102f891906112a5565b60405180910390f35b61031b60048036038101906103169190610fa8565b610a40565b005b61033760048036038101906103329190610fa8565b610b38565b60405161034491906111c8565b60405180910390f35b6002805461035a906115ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610386906115ac565b80156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050505081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104e191906112a5565b60405180910390a36001905092915050565b60035481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190611245565b60405180910390fd5b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061064e8382610c0090919063ffffffff16565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106d9858585610c16565b60019150509392505050565b600c81565b600c600a6106f89190611385565b6103e861070591906114a3565b81565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076457600080fd5b6107b682600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9c90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061080e82600354610e9c90919063ffffffff16565b600381905550600354600c600a6108259190611385565b6103e861083291906114a3565b101561083d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161089b91906112a5565b60405180910390a36001905092915050565b60056020528060005260406000206000915090505481565b6108cd610eb2565b73ffffffffffffffffffffffffffffffffffffffff166108eb61094d565b73ffffffffffffffffffffffffffffffffffffffff1614610941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093890611285565b60405180910390fd5b61094b6000610eba565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054610983906115ac565b80601f01602080910402602001604051908101604052809291908181526020018280546109af906115ac565b80156109fc5780601f106109d1576101008083540402835291602001916109fc565b820191906000526020600020905b8154815290600101906020018083116109df57829003601f168201915b505050505081565b6000610a11338484610c16565b6001905092915050565b6006602052816000526040600020602052806000526040600020600091509150505481565b610a48610eb2565b73ffffffffffffffffffffffffffffffffffffffff16610a6661094d565b73ffffffffffffffffffffffffffffffffffffffff1614610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390611285565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2390611225565b60405180910390fd5b610b3581610eba565b50565b6000610b42610eb2565b73ffffffffffffffffffffffffffffffffffffffff16610b6061094d565b73ffffffffffffffffffffffffffffffffffffffff1614610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90611285565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60008183610c0e91906114fd565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7d90611205565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cff90611265565b60405180910390fd5b610d5a81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c0090919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610def81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9c90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e8f91906112a5565b60405180910390a3505050565b60008183610eaa91906112dc565b905092915050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610f8d8161174d565b92915050565b600081359050610fa281611764565b92915050565b600060208284031215610fba57600080fd5b6000610fc884828501610f7e565b91505092915050565b60008060408385031215610fe457600080fd5b6000610ff285828601610f7e565b925050602061100385828601610f7e565b9150509250929050565b60008060006060848603121561102257600080fd5b600061103086828701610f7e565b935050602061104186828701610f7e565b925050604061105286828701610f93565b9150509250925092565b6000806040838503121561106f57600080fd5b600061107d85828601610f7e565b925050602061108e85828601610f93565b9150509250929050565b6110a181611531565b82525050565b6110b081611543565b82525050565b60006110c1826112c0565b6110cb81856112cb565b93506110db818560208601611579565b6110e48161163c565b840191505092915050565b60006110fc600f836112cb565b91506111078261165a565b602082019050919050565b600061111f6026836112cb565b915061112a82611683565b604082019050919050565b60006111426016836112cb565b915061114d826116d2565b602082019050919050565b60006111656014836112cb565b9150611170826116fb565b602082019050919050565b60006111886020836112cb565b915061119382611724565b602082019050919050565b6111a78161156f565b82525050565b60006020820190506111c26000830184611098565b92915050565b60006020820190506111dd60008301846110a7565b92915050565b600060208201905081810360008301526111fd81846110b6565b905092915050565b6000602082019050818103600083015261121e816110ef565b9050919050565b6000602082019050818103600083015261123e81611112565b9050919050565b6000602082019050818103600083015261125e81611135565b9050919050565b6000602082019050818103600083015261127e81611158565b9050919050565b6000602082019050818103600083015261129e8161117b565b9050919050565b60006020820190506112ba600083018461119e565b92915050565b600081519050919050565b600082825260208201905092915050565b60006112e78261156f565b91506112f28361156f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611327576113266115de565b5b828201905092915050565b6000808291508390505b600185111561137c57808604811115611358576113576115de565b5b60018516156113675780820291505b80810290506113758561164d565b945061133c565b94509492505050565b60006113908261156f565b915061139b8361156f565b92506113c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846113d0565b905092915050565b6000826113e0576001905061149c565b816113ee576000905061149c565b8160018114611404576002811461140e5761143d565b600191505061149c565b60ff8411156114205761141f6115de565b5b8360020a915084821115611437576114366115de565b5b5061149c565b5060208310610133831016604e8410600b84101617156114725782820a90508381111561146d5761146c6115de565b5b61149c565b61147f8484846001611332565b92509050818404811115611496576114956115de565b5b81810290505b9392505050565b60006114ae8261156f565b91506114b98361156f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114f2576114f16115de565b5b828202905092915050565b60006115088261156f565b91506115138361156f565b925082821015611526576115256115de565b5b828203905092915050565b600061153c8261154f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561159757808201518184015260208101905061157c565b838111156115a6576000848401525b50505050565b600060028204905060018216806115c457607f821691505b602082108114156115d8576115d761160d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61175681611531565b811461176157600080fd5b50565b61176d8161156f565b811461177857600080fd5b5056fea26469706673582212206f22500aca0fe05910c236dc0d1d8a999cbe0894c99d20df42fc9555b8117ee564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,uint256)": {
        "params": {
          "_to": "The address of the recipient",
          "_value": "the amount to send"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "_from": "The address of the sender",
          "_to": "The address of the recipient",
          "_value": "the amount to send"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "allowance": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "balanceOf": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "totalSupply": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transfer(address,uint256)": {
        "notice": "Transfer tokens Send `_value` tokens to `_to` from your account"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer tokens from other address Send `_value` tokens to `_to` on behalf of `_from`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2580,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2582,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2588,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2600,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "minter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2605,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2612,
        "contract": "contracts/ERC20/BaoPG/ERC20.sol:SimpleERC20",
        "label": "allowance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}