{
  "address": "0x8AC80aeA95aeF52Bee538e6F38B51564fF8316E1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_earnedToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Earned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "abandon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "abandoned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "addRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceInFarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canAbandon",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "signature",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_balanceInFarm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_abandoned",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_canDeposit",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_canAbandon",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvestor",
          "type": "address"
        }
      ],
      "name": "setHarvestor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "updateSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbaffdee451904d75b181ff51272522c13dd9e4fb4d3060d20d41e682b865c4bb",
  "receipt": {
    "to": null,
    "from": "0x46bEC8B77d117fDC69b0681c3697a81B43585C8b",
    "contractAddress": "0x8AC80aeA95aeF52Bee538e6F38B51564fF8316E1",
    "transactionIndex": 1,
    "gasUsed": "2714104",
    "logsBloom": "0x
    "blockHash": "0xcdb4c6d5a3e7ae109dfa5d9dc76c1249879cd8e705ea0865fd6e63c7153c8ba8",
    "transactionHash": "0xbaffdee451904d75b181ff51272522c13dd9e4fb4d3060d20d41e682b865c4bb",
    "logs": [],
    "blockNumber": 29827247,
    "cumulativeGasUsed": "2735104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
    "0xB94D807cF088D798D007C02948bA4Ac509acFEb4",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "e41972cc62bed10204dc364dbb3bc1fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_earnedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Earned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abandon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abandoned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"addRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceInFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAbandon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceInFarm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_abandoned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canAbandon\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvestor\",\"type\":\"address\"}],\"name\":\"setHarvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"updateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault/BaoPG/VaultLP.sol\":\"VaultLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/VaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n// import \\\"../interfaces/IVaultPolicy.sol\\\";\\n// import \\\"../interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\nabstract contract VaultBase is IVault, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    struct RouteInfo {\\n        address router;\\n        address[] path;\\n    }\\n\\n    uint256 internal constant RATIO_PRECISION = 1000000; // 6 decimals\\n    address internal constant weth = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619; // weth\\n\\n    // =========== state variables ================================\\n\\n    bool public initialized;\\n    //IVaultFactory public factory;\\n\\n    address public override owner; // the only address can deposit, withdraw\\n    address public harvestor; // this address can call earn method\\n    uint256 public lastEarnBlock;\\n    address public override wantAddress;\\n    bool public override abandoned;\\n    uint256 public slippage = 50000; // 0.5%\\n    // uint256 public templateId;\\n\\n    // =========== events ================================\\n\\n    event Earned(address indexed _earnedToken, uint256 _amount);\\n    event Deposited(uint256 _amount);\\n    event Withdraw(uint256 _amount);\\n    event Exit(uint256 _lpAmount);\\n\\n    // =========== constructor ===========================\\n\\n    constructor() {\\n        //factory = IVaultFactory(msg.sender);\\n    }\\n\\n    function initialize(address _owner) external virtual override {//, uint256 _vaultTemplateId) external virtual override {\\n        require(!initialized, \\\"already init\\\");\\n        //require(msg.sender == address(factory), \\\"!factory\\\");\\n        harvestor = _owner;\\n        owner = _owner;\\n        //templateId = _vaultTemplateId;\\n        //_syncSwapRoutes();\\n        initialized = true;\\n    }\\n\\n    // =========== views ===============================\\n\\n    function canAbandon() public view virtual override returns (bool);\\n\\n    function info()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            //uint256 _templateId,\\n            uint256 _balanceInFarm,\\n            uint256 _pendingRewards,\\n            bool _abandoned,\\n            bool _canDeposit,\\n            bool _canAbandon\\n        );\\n\\n    // =========== modifiers ===========================\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyHarvestor() {\\n        require(msg.sender == harvestor || msg.sender == owner, \\\"!owner && !harvestor\\\");\\n        _;\\n    }\\n\\n    modifier canHarvest() {\\n        require(initialized, \\\"!init\\\");\\n        _;\\n    }\\n\\n    modifier canDeposit() {\\n        require(initialized, \\\"!init\\\");\\n        //IVaultPolicy policy = getPolicy();\\n        //require(policy.canDeposit(address(this), owner), \\\"!canDeposit\\\");\\n        //_;\\n        //require(msg.sender == owner,\\\"!canDeposit\\\");\\n        _;\\n    }\\n\\n    // =========== restricted functions =================\\n\\n    function updateSlippage(uint256 _slippage) public virtual override onlyOwner {\\n        slippage = _slippage;\\n    }\\n\\n    function setHarvestor(address _harvestor) external onlyOwner {\\n        require(_harvestor != address(0x0), \\\"cannot address set to zero\\\");\\n        harvestor = _harvestor;\\n    }\\n\\n    function abandon() external virtual override;\\n\\n    function claimRewards() external virtual override;\\n\\n    // =========== internal functions ==================\\n\\n    function _safeSwap(\\n        address _swapRouterAddress,\\n        uint256 _amountIn,\\n        uint256 _slippage,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline\\n    ) internal {\\n        IUniswapV2Router _swapRouter = IUniswapV2Router(_swapRouterAddress);\\n        require(_path.length > 0, \\\"invalidSwapPath\\\");\\n        uint256[] memory amounts = _swapRouter.getAmountsOut(_amountIn, _path);\\n        uint256 _minAmountOut = (amounts[amounts.length - 1] * (RATIO_PRECISION - _slippage)) / RATIO_PRECISION;\\n\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(_amountIn, _minAmountOut, _path, _to, _deadline);\\n    }\\n\\n    function _unwrapETH() internal {\\n        // WETH -> ETH\\n        uint256 wethBalance = IERC20(weth).balanceOf(address(this));\\n        if (wethBalance > 0) {\\n            IWETH(weth).withdraw(wethBalance);\\n        }\\n    }\\n\\n    function _wrapETH() internal {\\n        // ETH -> WETH\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            IWETH(weth).deposit{value: ethBalance}();\\n        }\\n    }\\n\\n    function _isWETH(address _token) internal pure returns (bool) {\\n        return _token == weth;\\n    }\\n\\n    // function _syncSwapRoutes() internal virtual;\\n\\n    // =========== emergency functions =================\\n\\n    function rescueFund(address _token, uint256 _amount) public virtual override onlyOwner {\\n        IERC20(_token).safeTransfer(owner, _amount);\\n    }\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data\\n    ) public onlyOwner returns (bytes memory) {\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\\n        require(success, string(\\\"DevFund::executeTransaction: Transaction execution reverted.\\\"));\\n        return returnData;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xedd2f4b9a88403041d57012ef06bfe054df515763585b3deffc1a7df6ae4f0d6\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/VaultLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./VaultBase.sol\\\";\\nimport \\\"./interfaces/IMasterChef.sol\\\";\\n\\ncontract VaultLP is VaultBase {\\n    using SafeERC20 for IERC20;\\n\\n    IMasterChef public masterChef;\\n    address public token0;\\n    address public token1;\\n    address public rewardToken;\\n    uint256 public poolId;\\n    address public liquidityRouter;\\n\\n    mapping(address => mapping(address => RouteInfo)) public routes;\\n\\n    uint256 public swapTimeout;\\n\\n    // hardcoded when deploy\\n    constructor(\\n        address _liquidityRouter,\\n        IMasterChef _masterChef,\\n        uint256 _poolId\\n    ) VaultBase() {\\n        liquidityRouter = _liquidityRouter;\\n        poolId = _poolId;\\n        masterChef = _masterChef;\\n        (wantAddress, , , ) = _masterChef.poolInfo(poolId);\\n        rewardToken = _masterChef.rewardToken();\\n        token0 = IUniswapV2Pair(wantAddress).token0();\\n        token1 = IUniswapV2Pair(wantAddress).token1();\\n        // _syncSwapRoutes();\\n    }\\n\\n    // ========== views =================\\n\\n    function balanceInFarm() public view override returns (uint256) {\\n        (uint256 _amount, ) = masterChef.userInfo(poolId, address(this));\\n        return _amount;\\n    }\\n\\n    function pending() public view override returns (uint256) {\\n        return masterChef.pendingReward(poolId, address(this));\\n    }\\n\\n    function canAbandon() public view override returns (bool) {\\n        bool _noRewardTokenLeft = IERC20(rewardToken).balanceOf(address(this)) == 0;\\n        bool _noLpTokenLeft = IERC20(wantAddress).balanceOf(address(this)) == 0;\\n        bool _noPending = pending() == 0;\\n        return _noRewardTokenLeft && _noLpTokenLeft && _noPending;\\n    }\\n\\n    function info()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256 _balanceInFarm,\\n            uint256 _pendingRewards,\\n            bool _abandoned,\\n            bool _canDeposit,\\n            bool _canAbandon\\n        )\\n    {\\n        //IVaultPolicy policy = getPolicy();\\n        _balanceInFarm = balanceInFarm();\\n        _pendingRewards = pending();\\n        _canDeposit = true; //policy.canDeposit(address(this), owner);\\n        _canAbandon = canAbandon();\\n        _abandoned = abandoned;\\n    }\\n\\n    // ========== vault core functions ===========\\n    function addRoute(\\n        address _from,\\n        address _to,\\n        address _router,\\n        address[] calldata path\\n    ) override external onlyOwner {\\n        require(_from != address(0), \\\"Src token is invalid\\\");\\n        require(_to != address(0), \\\"Dst token is invalid\\\");\\n        require(_from != _to, \\\"Src token must be diff from Dst token\\\");\\n        require(_router != address(0), \\\"Router is invalid\\\");\\n        require(path[0] == _from, \\\"Route must start with src token\\\");\\n        require(path[path.length - 1] == _to, \\\"Route must end with dst token\\\");\\n        RouteInfo memory _info = RouteInfo(_router, path);\\n        routes[_from][_to] = _info;\\n    }\\n\\n    function compound() external override onlyHarvestor {\\n        // Harvest farm tokens\\n        uint256 _initBalance = balanceInFarm();\\n        _widthdrawFromFarm(0);\\n\\n        if (_isWETH(rewardToken)) {\\n            _wrapETH();\\n        }\\n\\n        // Converts farm tokens into want tokens\\n        uint256 earnedAmt = IERC20(rewardToken).balanceOf(address(this));\\n\\n        if (rewardToken != token0) {\\n            _swap(rewardToken, token0, earnedAmt / 2);\\n        }\\n\\n        if (rewardToken != token1) {\\n            _swap(rewardToken, token1, earnedAmt / 2);\\n        }\\n\\n        IERC20 _token0 = IERC20(token0);\\n        IERC20 _token1 = IERC20(token1);\\n        // Get want tokens, ie. add liquidity\\n        uint256 token0Amt = _token0.balanceOf(address(this));\\n        uint256 token1Amt = _token1.balanceOf(address(this));\\n        if (token0Amt > 0 && token1Amt > 0) {\\n            _token0.safeIncreaseAllowance(liquidityRouter, token0Amt);\\n            _token1.safeIncreaseAllowance(liquidityRouter, token1Amt);\\n            IUniswapV2Router(liquidityRouter).addLiquidity(\\n                token0,\\n                token1,\\n                token0Amt,\\n                token1Amt,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + swapTimeout\\n            );\\n        }\\n\\n        lastEarnBlock = block.number;\\n\\n        _depositToFarm();\\n        _cleanUp();\\n\\n        uint256 _afterBalance = balanceInFarm();\\n        if (_afterBalance > _initBalance) {\\n            emit Earned(wantAddress, _afterBalance - _initBalance);\\n        } else {\\n            emit Earned(wantAddress, 0);\\n        }\\n    }\\n\\n    function deposit(uint256 _wantAmt) public override onlyOwner nonReentrant returns (uint256) {\\n        IERC20(wantAddress).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\\n        _depositToFarm();\\n        return _wantAmt;\\n    }\\n\\n    function withdrawAll() external override onlyOwner returns (uint256 _withdrawBalance) {\\n        uint256 _balance = balanceInFarm();\\n        _withdrawBalance = withdraw(_balance);\\n        _cleanUp();\\n        _withdrawFromVault();\\n        emit Exit(_withdrawBalance);\\n    }\\n\\n    function withdraw(uint256 _wantAmt) public override onlyOwner nonReentrant returns (uint256) {\\n        require(_wantAmt > 0, \\\"_wantAmt <= 0\\\");\\n        _widthdrawFromFarm(_wantAmt);\\n        uint256 _balance = IERC20(rewardToken).balanceOf(address(this));\\n        _withdrawFromVault();\\n        return _balance;\\n    }\\n\\n    function claimRewards() external override onlyOwner {\\n        _widthdrawFromFarm(0);\\n        uint256 _balance = IERC20(rewardToken).balanceOf(address(this));\\n        if (_balance > 0) {\\n            IERC20(rewardToken).safeTransfer(msg.sender, _balance);\\n        }\\n    }\\n\\n    function abandon() external override onlyOwner {\\n        require(canAbandon(), \\\"Vault cannot be abandoned\\\");\\n        abandoned = true;\\n    }\\n\\n    // function syncSwapRoutes() external onlyOwner {\\n    //     _syncSwapRoutes();\\n    // }\\n\\n    // ============= internal functions ================\\n\\n    // function _syncSwapRoutes() internal override {\\n    //     _addRouteInfo(rewardToken, token0);\\n    //     _addRouteInfo(rewardToken, token1);\\n    //     _addRouteInfo(token0, rewardToken);\\n    //     _addRouteInfo(token1, rewardToken);\\n    // }\\n\\n    // //debugging\\n    // function _addRouteInfo(address _from, address _to) internal {\\n    //     if (_from != _to) {\\n    //         (address _router, address[] memory _path) = IRouter(router).getSwapRoute(_from, _to);\\n    //         require(_from != address(0), \\\"Src token is invalid\\\");\\n    //         require(_to != address(0), \\\"Dst token is invalid\\\");\\n    //         require(_router != address(0), \\\"Router is invalid\\\");\\n    //         require(_path[0] == _from, \\\"Route must start with src token\\\");\\n    //         require(_path[_path.length - 1] == _to, \\\"Route must end with dst token\\\");\\n    //         routes[_from][_to] = RouteInfo(_router, _path);\\n    //     }\\n    // }\\n\\n    function _getSwapRoute(address _fromToken, address _toToken) internal view returns (address _router, address[] memory _path) {\\n        RouteInfo storage _info = routes[_fromToken][_toToken];\\n        _router = _info.router;\\n        _path = _info.path;\\n    }\\n\\n    function _withdrawFromVault() internal {\\n        uint256 _dustRewardBal = IERC20(rewardToken).balanceOf(address(this));\\n        if (_dustRewardBal > 0) {\\n            IERC20(rewardToken).safeTransfer(msg.sender, _dustRewardBal);\\n        }\\n        uint256 _wantBalance = IERC20(wantAddress).balanceOf(address(this));\\n        if (_wantBalance > 0) {\\n            IERC20(wantAddress).safeTransfer(msg.sender, _wantBalance);\\n        }\\n    }\\n\\n    function _cleanUp() internal {\\n        // Converts dust tokens into earned tokens, which will be reinvested on the next earn().\\n        // Converts token0 dust (if any) to earned tokens\\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\\n        if (token0 != rewardToken && token0Amt > 0) {\\n            _swap(token0, rewardToken, token0Amt);\\n        }\\n\\n        // Converts token1 dust (if any) to earned tokens\\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\\n        if (token1 != rewardToken && token1Amt > 0) {\\n            _swap(token1, rewardToken, token1Amt);\\n        }\\n    }\\n\\n    function _depositToFarm() internal canDeposit {\\n        IERC20 wantToken = IERC20(wantAddress);\\n        uint256 wantAmt = wantToken.balanceOf(address(this));\\n        wantToken.safeIncreaseAllowance(address(masterChef), wantAmt);\\n        masterChef.deposit(poolId, wantAmt);\\n        emit Deposited(wantAmt);\\n    }\\n\\n    function _widthdrawFromFarm(uint256 _wantAmt) internal {\\n        masterChef.withdraw(poolId, _wantAmt);\\n        emit Withdraw(_wantAmt);\\n    }\\n\\n    function _swap(\\n        address _inputToken,\\n        address _outputToken,\\n        uint256 _inputAmount\\n    ) internal {\\n        if (_inputAmount == 0) {\\n            return;\\n        }\\n        (address _router, address[] memory _path) = _getSwapRoute(_inputToken, _outputToken);\\n        require(_router != address(0), \\\"invalid route\\\");\\n        require(_path[0] == _inputToken, \\\"Route must start with src token\\\");\\n        require(_path[_path.length - 1] == _outputToken, \\\"Route must end with dst token\\\");\\n        IERC20(_inputToken).safeApprove(_router, 0);\\n        IERC20(_inputToken).safeApprove(_router, _inputAmount);\\n        _safeSwap(_router, _inputAmount, slippage, _path, address(this), block.timestamp + swapTimeout);\\n    }\\n}\\n\",\"keccak256\":\"0x6023f85364124ee48a5463881fd791c5a7c48b93877e3b69abd448e35f42667f\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IMasterChef {\\n    function poolInfo(uint256 poolId)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accRewardPerShare\\n        );\\n\\n    function userInfo(uint256 poolId, address user) external view returns (uint256 amount, uint256 debt);\\n\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function deposit(uint256 poolId, uint256 amount) external;\\n\\n    function withdraw(uint256 poolId, uint256 amount) external;\\n\\n    function rewardToken() external view returns (address);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external;\\n}\\n\",\"keccak256\":\"0x828e4b608e897f3e37df73831738203b9cea426105a44216a35d18d0d8f2f72d\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/interfaces/IRouter.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\ninterface IRouter {\\n    struct RouteInfo {\\n        address router;\\n        address[] path;\\n    }\\n\\n    function getSwapRoute(address _fromToken, address _toToken)\\n        external\\n        view\\n        returns (address _router, address[] memory _path);\\n}\\n\",\"keccak256\":\"0x8188ee9e390df03bbbb1eb08cb348cbf911a25afaa5ed9046749eae6c995617c\"},\"contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\ninterface IUniswapV2Pair {\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb29b1204e1af70143ecb17dd53233ca99065f1bbad7ceacdcb7e62e874e69dd0\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    function WBNB() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityBNB(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountBNBMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountBNB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityBNB(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountBNBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountBNB);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityBNBWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountBNBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountBNB);\\n    function removeLiquidityBNBSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountBNBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountBNB);\\n    function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountBNBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountBNB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactBNBForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForBNBSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactBNBForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactBNB(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForBNB(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapBNBForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x94dff9e718bcc49d2ec17ce28a4aeaf1d3c12d8702271642c1c2f442dc9076f5\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IVault {\\n    function owner() external view returns (address);\\n\\n    function wantAddress() external view returns (address);\\n\\n    function balanceInFarm() external view returns (uint256);\\n\\n    function pending() external view returns (uint256);\\n\\n    function abandoned() external view returns (bool);\\n\\n    function initialize(address _owner) external;\\n\\n    function compound() external;\\n\\n    function abandon() external;\\n\\n    function claimRewards() external;\\n\\n    function deposit(uint256 _wantAmt) external returns (uint256);\\n\\n    function withdraw(uint256 _wantAmt) external returns (uint256);\\n\\n    function withdrawAll() external returns (uint256);\\n\\n    function updateSlippage(uint256 _slippage) external;\\n\\n    function rescueFund(address _token, uint256 _amount) external;\\n\\n    function canAbandon() external returns (bool);\\n    \\n    function addRoute(\\n        address _from,\\n        address _to,\\n        address _router,\\n        address[] calldata path\\n    ) external;\\n\\n    function info()\\n        external\\n        view\\n        returns (\\n            // uint256 _templateId,\\n            uint256 _balanceInFarm,\\n            uint256 _pendingRewards,\\n            bool _abandoned,\\n            bool _canDeposit,\\n            bool _canAbandon\\n        );\\n}\\n\",\"keccak256\":\"0xb8924ee3c9509ed0eba443e32d32fdb7f47bcab3fca4e662bfcf7c594e440d2a\",\"license\":\"MIT\"},\"contracts/Vault/BaoPG/interfaces/IWETH.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x26c52ef1fc0f9ca6337b9d046f800249af9bc0df1fcb29074ec45b8bc19bff04\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261c3506005553480156200001757600080fd5b5060405162002fce38038062002fce8339810160408190526200003a91620002f6565b6001600055600b80546001600160a01b038086166001600160a01b031992831617909255600a839055600680549285169290911682179055604051631526fe2760e01b8152631526fe27906200009890849060040190815260200190565b60806040518083038186803b158015620000b157600080fd5b505afa158015620000c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ec91906200033d565b5050600480546001600160a01b0319166001600160a01b039384161781556040805163f7c618c160e01b815290519386169363f7c618c1935081830192602092829003018186803b1580156200014157600080fd5b505afa15801562000156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017c9190620002d0565b600980546001600160a01b0319166001600160a01b039283161790556004805460408051630dfe168160e01b815290519190931692630dfe16819281810192602092909190829003018186803b158015620001d657600080fd5b505afa158015620001eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002119190620002d0565b600780546001600160a01b0319166001600160a01b03928316179055600480546040805163d21220a760e01b81529051919093169263d21220a79281810192602092909190829003018186803b1580156200026b57600080fd5b505afa15801562000280573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a69190620002d0565b600880546001600160a01b0319166001600160a01b03929092169190911790555062000397915050565b600060208284031215620002e2578081fd5b8151620002ef816200037e565b9392505050565b6000806000606084860312156200030b578182fd5b835162000318816200037e565b60208501519093506200032b816200037e565b80925050604084015190509250925092565b6000806000806080858703121562000353578081fd5b845162000360816200037e565b60208601516040870151606090970151919890975090945092505050565b6001600160a01b03811681146200039457600080fd5b50565b612c2780620003a76000396000f3fe6080604052600436106101dc5760003560e01c80636e261df111610102578063c3787e6011610095578063e7a0367911610064578063e7a0367914610579578063edc3e87b14610599578063f69e2046146105ae578063f7c618c1146105c357600080fd5b8063c3787e6014610504578063c4d66de814610524578063d21220a714610544578063e20ccec31461056457600080fd5b80638da5cb5b116100d15780638da5cb5b1461048957806394de34f1146104ae578063b6b55f25146104c4578063ba27240d146104e457600080fd5b80636e261df11461042a578063827cdc7f1461044a578063853828b61461045f578063883188341461047457600080fd5b80632e1a7d4d1161017a5780633e0dc34e116101495780633e0dc34e146103935780635055374d146103a9578063575a86b2146103ea57806358a79eb91461040a57600080fd5b80632e1a7d4d14610303578063370158ea14610323578063372500ab146103685780633e032a3b1461037d57600080fd5b8063158ef93e116101b6578063158ef93e1461027a57806315b0d496146102945780632224fa25146102b657806324702944146102e357600080fd5b8063047168e0146101e85780630dfe16811461021e5780630fa4e01e1461025657600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b5060045461020990600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b5060075461023e906001600160a01b031681565b6040516001600160a01b039091168152602001610215565b34801561026257600080fd5b5061026c60035481565b604051908152602001610215565b34801561028657600080fd5b506001546102099060ff1681565b3480156102a057600080fd5b506102b46102af3660046128fa565b6105e3565b005b3480156102c257600080fd5b506102d66102d136600461278e565b610620565b6040516102159190612a36565b3480156102ef57600080fd5b50600b5461023e906001600160a01b031681565b34801561030f57600080fd5b5061026c61031e3660046128fa565b610738565b34801561032f57600080fd5b50610338610899565b6040805195865260208601949094529115159284019290925290151560608301521515608082015260a001610215565b34801561037457600080fd5b506102b46108db565b34801561038957600080fd5b5061026c60055481565b34801561039f57600080fd5b5061026c600a5481565b3480156103b557600080fd5b5061023e6103c4366004612693565b600c6020908152600092835260408084209091529082529020546001600160a01b031681565b3480156103f657600080fd5b5060065461023e906001600160a01b031681565b34801561041657600080fd5b5060025461023e906001600160a01b031681565b34801561043657600080fd5b506102b4610445366004612765565b6109b2565b34801561045657600080fd5b5061026c610a04565b34801561046b57600080fd5b5061026c610a95565b34801561048057600080fd5b506102b4610b25565b34801561049557600080fd5b5060015461023e9061010090046001600160a01b031681565b3480156104ba57600080fd5b5061026c600d5481565b3480156104d057600080fd5b5061026c6104df3660046128fa565b610bbd565b3480156104f057600080fd5b506102b46104ff366004612679565b610c70565b34801561051057600080fd5b506102b461051f3660046126c5565b610d17565b34801561053057600080fd5b506102b461053f366004612679565b611083565b34801561055057600080fd5b5060085461023e906001600160a01b031681565b34801561057057600080fd5b5061026c611106565b34801561058557600080fd5b5060045461023e906001600160a01b031681565b3480156105a557600080fd5b50610209611192565b3480156105ba57600080fd5b506102b46112c0565b3480156105cf57600080fd5b5060095461023e906001600160a01b031681565b60015461010090046001600160a01b0316331461061b5760405162461bcd60e51b815260040161061290612a49565b60405180910390fd5b600555565b60015460609061010090046001600160a01b031633146106525760405162461bcd60e51b815260040161061290612a49565b6060835160001415610665575081610691565b83805190602001208360405160200161067f9291906129e9565b60405160208183030381529060405290505b600080876001600160a01b031687846040516106ad9190612a1a565b60006040518083038185875af1925050503d80600081146106ea576040519150601f19603f3d011682016040523d82523d6000602084013e6106ef565b606091505b5091509150816040518060600160405280603c8152602001612bb6603c91399061072c5760405162461bcd60e51b81526004016106129190612a36565b50979650505050505050565b60015460009061010090046001600160a01b0316331461076a5760405162461bcd60e51b815260040161061290612a49565b600260005414156107bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610612565b6002600055816107ff5760405162461bcd60e51b815260206004820152600d60248201526c05f77616e74416d74203c3d203609c1b6044820152606401610612565b61080882611764565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108849190612912565b905061088e61180e565b600160005592915050565b60008060008060006108a9610a04565b94506108b3611106565b9350600191506108c1611192565b60045495969495600160a01b900460ff1694929350919050565b60015461010090046001600160a01b0316331461090a5760405162461bcd60e51b815260040161061290612a49565b6109146000611764565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612912565b905080156109af576009546109af906001600160a01b03163383611945565b50565b60015461010090046001600160a01b031633146109e15760405162461bcd60e51b815260040161061290612a49565b600154610a00906001600160a01b038481169161010090041683611945565b5050565b600654600a546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061292a565b5092915050565b60015460009061010090046001600160a01b03163314610ac75760405162461bcd60e51b815260040161061290612a49565b6000610ad1610a04565b9050610adc81610738565b9150610ae66119ad565b610aee61180e565b6040518281527fb20101a10c7cc8d4a9b5accf3d34c34f89d53ec195fce51620af16429526c7559060200160405180910390a15090565b60015461010090046001600160a01b03163314610b545760405162461bcd60e51b815260040161061290612a49565b610b5c611192565b610ba85760405162461bcd60e51b815260206004820152601960248201527f5661756c742063616e6e6f74206265206162616e646f6e6564000000000000006044820152606401610612565b6004805460ff60a01b1916600160a01b179055565b60015460009061010090046001600160a01b03163314610bef5760405162461bcd60e51b815260040161061290612a49565b60026000541415610c425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610612565b6002600055600454610c5f906001600160a01b0316333085611b31565b610c67611b6f565b50600160005590565b60015461010090046001600160a01b03163314610c9f5760405162461bcd60e51b815260040161061290612a49565b6001600160a01b038116610cf55760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420616464726573732073657420746f207a65726f0000000000006044820152606401610612565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60015461010090046001600160a01b03163314610d465760405162461bcd60e51b815260040161061290612a49565b6001600160a01b038516610d935760405162461bcd60e51b815260206004820152601460248201527314dc98c81d1bdad95b881a5cc81a5b9d985b1a5960621b6044820152606401610612565b6001600160a01b038416610de05760405162461bcd60e51b8152602060048201526014602482015273111cdd081d1bdad95b881a5cc81a5b9d985b1a5960621b6044820152606401610612565b836001600160a01b0316856001600160a01b03161415610e505760405162461bcd60e51b815260206004820152602560248201527f53726320746f6b656e206d75737420626520646966662066726f6d20447374206044820152643a37b5b2b760d91b6064820152608401610612565b6001600160a01b038316610e9a5760405162461bcd60e51b8152602060048201526011602482015270149bdd5d195c881a5cc81a5b9d985b1a59607a1b6044820152606401610612565b846001600160a01b031682826000818110610ec557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610eda9190612679565b6001600160a01b031614610f305760405162461bcd60e51b815260206004820152601f60248201527f526f757465206d75737420737461727420776974682073726320746f6b656e006044820152606401610612565b6001600160a01b0384168282610f47600182612b46565b818110610f6457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610f799190612679565b6001600160a01b031614610fcf5760405162461bcd60e51b815260206004820152601d60248201527f526f757465206d75737420656e6420776974682064737420746f6b656e0000006044820152606401610612565b60006040518060400160405280856001600160a01b0316815260200184848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250506001600160a01b038981168252600c602090815260408084208b841685528252909220845181546001600160a01b0319169216919091178155838201518051949550859491935061107892600185019291019061258b565b505050505050505050565b60015460ff16156110c55760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481a5b9a5d60a21b6044820152606401610612565b600280546001600160a01b0319166001600160a01b03929092169182179055600180546001600160a81b03191661010090920260ff19169190911781179055565b600654600a54604051634c4b4f4160e11b815260048101919091523060248201526000916001600160a01b0316906398969e829060440160206040518083038186803b15801561115557600080fd5b505afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190612912565b905090565b6009546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156111da57600080fd5b505afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112129190612912565b600480546040516370a0823160e01b81523092810192909252911592506000916001600160a01b0316906370a082319060240160206040518083038186803b15801561125d57600080fd5b505afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190612912565b15905060006112a2611106565b1590508280156112af5750815b80156112b85750805b935050505090565b6002546001600160a01b03163314806112e8575060015461010090046001600160a01b031633145b61132b5760405162461bcd60e51b815260206004820152601460248201527310b7bbb732b91013131010b430b93b32b9ba37b960611b6044820152606401610612565b6000611335610a04565b90506113416000611764565b6009546001600160a01b0316737ceb23fd6bc0add59e62ac25578270cff1b9f619141561137057611370611cf2565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156113b457600080fd5b505afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec9190612912565b6007546009549192506001600160a01b0391821691161461142e5760095460075461142e916001600160a01b039081169116611429600285612b07565b611d64565b6008546009546001600160a01b0390811691161461146857600954600854611468916001600160a01b039081169116611429600285612b07565b6007546008546040516370a0823160e01b81523060048201526001600160a01b03928316929091169060009083906370a082319060240160206040518083038186803b1580156114b757600080fd5b505afa1580156114cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ef9190612912565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561153457600080fd5b505afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c9190612912565b905060008211801561157e5750600081115b156116a257600b5461159d906001600160a01b03868116911684611f31565b600b546115b7906001600160a01b03858116911683611f31565b600b54600754600854600d546001600160a01b039384169363e8e3370093811692169086908690600090819030906115ef9042612aef565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b15801561166657600080fd5b505af115801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e919061294d565b5050505b436003556116ae611b6f565b6116b66119ad565b60006116c0610a04565b905086811115611717576004546001600160a01b03167f053fa1fc52294a40b4ff1a988765bd298c00caa24d685cc3f767dcfde254ef9a6117018984612b46565b60405190815260200160405180910390a261175b565b600454604051600081526001600160a01b03909116907f053fa1fc52294a40b4ff1a988765bd298c00caa24d685cc3f767dcfde254ef9a9060200160405180910390a25b50505050505050565b600654600a54604051630441a3e760e41b81526001600160a01b039092169163441a3e70916117a0918590600401918252602082015260400190565b600060405180830381600087803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b505050507f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d8160405161180391815260200190565b60405180910390a150565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561185257600080fd5b505afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a9190612912565b905080156118a9576009546118a9906001600160a01b03163383611945565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156118f257600080fd5b505afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a9190612912565b90508015610a0057600454610a00906001600160a01b031633835b6040516001600160a01b0383166024820152604481018290526119a890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ff2565b505050565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156119f157600080fd5b505afa158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190612912565b6009546007549192506001600160a01b03918216911614801590611a4d5750600081115b15611a6f57600754600954611a6f916001600160a01b03908116911683611d64565b6008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb9190612912565b6009546008549192506001600160a01b03918216911614801590611b0f5750600081115b15610a0057600854600954610a00916001600160a01b03908116911683611d64565b6040516001600160a01b0380851660248301528316604482015260648101829052611b699085906323b872dd60e01b90608401611971565b50505050565b60015460ff16611ba95760405162461bcd60e51b8152602060048201526005602482015264085a5b9a5d60da1b6044820152606401610612565b600480546040516370a0823160e01b815230928101929092526001600160a01b03169060009082906370a082319060240160206040518083038186803b158015611bf257600080fd5b505afa158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a9190612912565b600654909150611c47906001600160a01b03848116911683611f31565b600654600a54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891611c83918590600401918252602082015260400190565b600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b505050507f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea81604051611ce691815260200190565b60405180910390a15050565b4780156109af57737ceb23fd6bc0add59e62ac25578270cff1b9f6196001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d4857600080fd5b505af1158015611d5c573d6000803e3d6000fd5b505050505050565b80611d6e57505050565b600080611d7b85856120c4565b90925090506001600160a01b038216611dc65760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420726f75746560981b6044820152606401610612565b846001600160a01b031681600081518110611df157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614611e4f5760405162461bcd60e51b815260206004820152601f60248201527f526f757465206d75737420737461727420776974682073726320746f6b656e006044820152606401610612565b836001600160a01b03168160018351611e689190612b46565b81518110611e8657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614611ee45760405162461bcd60e51b815260206004820152601d60248201527f526f757465206d75737420656e6420776974682064737420746f6b656e0000006044820152606401610612565b611ef96001600160a01b038616836000612157565b611f0d6001600160a01b0386168385612157565b611f2a82846005548430600d5442611f259190612aef565b61227b565b5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611f7d57600080fd5b505afa158015611f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb59190612912565b611fbf9190612aef565b6040516001600160a01b038516602482015260448101829052909150611b6990859063095ea7b360e01b90606401611971565b6000612047826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124119092919063ffffffff16565b8051909150156119a8578080602001905181019061206591906128da565b6119a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610612565b6001600160a01b038083166000908152600c60209081526040808320858516845282529182902080546001820180548551818602810186019096528086529190951694606094929390919083018282801561214857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161212a575b50505050509150509250929050565b8015806121e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156121a657600080fd5b505afa1580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190612912565b155b61224b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610612565b6040516001600160a01b0383166024820152604481018290526119a890849063095ea7b360e01b90606401611971565b825186906122bd5760405162461bcd60e51b815260206004820152600f60248201526e0d2dcecc2d8d2c8a6eec2e0a0c2e8d608b1b6044820152606401610612565b60405163d06ca61f60e01b81526000906001600160a01b0383169063d06ca61f906122ee908a908990600401612a69565b60006040518083038186803b15801561230657600080fd5b505afa15801561231a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123429190810190612832565b90506000620f42406123548882612b46565b83600185516123639190612b46565b8151811061238157634e487b7160e01b600052603260045260246000fd5b60200260200101516123939190612b27565b61239d9190612b07565b604051635c11d79560e01b81529091506001600160a01b03841690635c11d795906123d4908b9085908b908b908b90600401612a82565b600060405180830381600087803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b50505050505050505050505050565b6060612420848460008561242a565b90505b9392505050565b60608247101561248b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610612565b843b6124d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610612565b600080866001600160a01b031685876040516124f59190612a1a565b60006040518083038185875af1925050503d8060008114612532576040519150601f19603f3d011682016040523d82523d6000602084013e612537565b606091505b5091509150612547828286612552565b979650505050505050565b60608315612561575081612423565b8251156125715782518084602001fd5b8160405162461bcd60e51b81526004016106129190612a36565b8280548282559060005260206000209081019282156125e0579160200282015b828111156125e057825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906125ab565b506125ec9291506125f0565b5090565b5b808211156125ec57600081556001016125f1565b600067ffffffffffffffff83111561261f5761261f612b9f565b612632601f8401601f1916602001612abe565b905082815283838301111561264657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461267457600080fd5b919050565b60006020828403121561268a578081fd5b6124238261265d565b600080604083850312156126a5578081fd5b6126ae8361265d565b91506126bc6020840161265d565b90509250929050565b6000806000806000608086880312156126dc578081fd5b6126e58661265d565b94506126f36020870161265d565b93506127016040870161265d565b9250606086013567ffffffffffffffff8082111561271d578283fd5b818801915088601f830112612730578283fd5b81358181111561273e578384fd5b8960208260051b8501011115612752578384fd5b9699959850939650602001949392505050565b60008060408385031215612777578182fd5b6127808361265d565b946020939093013593505050565b600080600080608085870312156127a3578384fd5b6127ac8561265d565b935060208501359250604085013567ffffffffffffffff808211156127cf578384fd5b818701915087601f8301126127e2578384fd5b6127f188833560208501612605565b93506060870135915080821115612806578283fd5b508501601f81018713612817578182fd5b61282687823560208401612605565b91505092959194509250565b60006020808385031215612844578182fd5b825167ffffffffffffffff8082111561285b578384fd5b818501915085601f83011261286e578384fd5b81518181111561288057612880612b9f565b8060051b9150612891848301612abe565b8181528481019084860184860187018a10156128ab578788fd5b8795505b838610156128cd5780518352600195909501949186019186016128af565b5098975050505050505050565b6000602082840312156128eb578081fd5b81518015158114612423578182fd5b60006020828403121561290b578081fd5b5035919050565b600060208284031215612923578081fd5b5051919050565b6000806040838503121561293c578182fd5b505080516020909101519092909150565b600080600060608486031215612961578283fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b838110156129b25781516001600160a01b03168752958201959082019060010161298d565b509495945050505050565b600081518084526129d5816020860160208601612b5d565b601f01601f19169290920160200192915050565b6001600160e01b0319831681528151600090612a0c816004850160208701612b5d565b919091016004019392505050565b60008251612a2c818460208701612b5d565b9190910192915050565b60208152600061242360208301846129bd565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b828152604060208201526000612420604083018461297a565b85815284602082015260a060408201526000612aa160a083018661297a565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ae757612ae7612b9f565b604052919050565b60008219821115612b0257612b02612b89565b500190565b600082612b2257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b4157612b41612b89565b500290565b600082821015612b5857612b58612b89565b500390565b60005b83811015612b78578181015183820152602001612b60565b83811115611b695750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe44657646756e643a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e20657865637574696f6e2072657665727465642ea2646970667358221220286a1e5e313ee9f6d864b0857aec012d3a359bec6b5c1cba6e15a424a9f63dd064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c80636e261df111610102578063c3787e6011610095578063e7a0367911610064578063e7a0367914610579578063edc3e87b14610599578063f69e2046146105ae578063f7c618c1146105c357600080fd5b8063c3787e6014610504578063c4d66de814610524578063d21220a714610544578063e20ccec31461056457600080fd5b80638da5cb5b116100d15780638da5cb5b1461048957806394de34f1146104ae578063b6b55f25146104c4578063ba27240d146104e457600080fd5b80636e261df11461042a578063827cdc7f1461044a578063853828b61461045f578063883188341461047457600080fd5b80632e1a7d4d1161017a5780633e0dc34e116101495780633e0dc34e146103935780635055374d146103a9578063575a86b2146103ea57806358a79eb91461040a57600080fd5b80632e1a7d4d14610303578063370158ea14610323578063372500ab146103685780633e032a3b1461037d57600080fd5b8063158ef93e116101b6578063158ef93e1461027a57806315b0d496146102945780632224fa25146102b657806324702944146102e357600080fd5b8063047168e0146101e85780630dfe16811461021e5780630fa4e01e1461025657600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b5060045461020990600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b5060075461023e906001600160a01b031681565b6040516001600160a01b039091168152602001610215565b34801561026257600080fd5b5061026c60035481565b604051908152602001610215565b34801561028657600080fd5b506001546102099060ff1681565b3480156102a057600080fd5b506102b46102af3660046128fa565b6105e3565b005b3480156102c257600080fd5b506102d66102d136600461278e565b610620565b6040516102159190612a36565b3480156102ef57600080fd5b50600b5461023e906001600160a01b031681565b34801561030f57600080fd5b5061026c61031e3660046128fa565b610738565b34801561032f57600080fd5b50610338610899565b6040805195865260208601949094529115159284019290925290151560608301521515608082015260a001610215565b34801561037457600080fd5b506102b46108db565b34801561038957600080fd5b5061026c60055481565b34801561039f57600080fd5b5061026c600a5481565b3480156103b557600080fd5b5061023e6103c4366004612693565b600c6020908152600092835260408084209091529082529020546001600160a01b031681565b3480156103f657600080fd5b5060065461023e906001600160a01b031681565b34801561041657600080fd5b5060025461023e906001600160a01b031681565b34801561043657600080fd5b506102b4610445366004612765565b6109b2565b34801561045657600080fd5b5061026c610a04565b34801561046b57600080fd5b5061026c610a95565b34801561048057600080fd5b506102b4610b25565b34801561049557600080fd5b5060015461023e9061010090046001600160a01b031681565b3480156104ba57600080fd5b5061026c600d5481565b3480156104d057600080fd5b5061026c6104df3660046128fa565b610bbd565b3480156104f057600080fd5b506102b46104ff366004612679565b610c70565b34801561051057600080fd5b506102b461051f3660046126c5565b610d17565b34801561053057600080fd5b506102b461053f366004612679565b611083565b34801561055057600080fd5b5060085461023e906001600160a01b031681565b34801561057057600080fd5b5061026c611106565b34801561058557600080fd5b5060045461023e906001600160a01b031681565b3480156105a557600080fd5b50610209611192565b3480156105ba57600080fd5b506102b46112c0565b3480156105cf57600080fd5b5060095461023e906001600160a01b031681565b60015461010090046001600160a01b0316331461061b5760405162461bcd60e51b815260040161061290612a49565b60405180910390fd5b600555565b60015460609061010090046001600160a01b031633146106525760405162461bcd60e51b815260040161061290612a49565b6060835160001415610665575081610691565b83805190602001208360405160200161067f9291906129e9565b60405160208183030381529060405290505b600080876001600160a01b031687846040516106ad9190612a1a565b60006040518083038185875af1925050503d80600081146106ea576040519150601f19603f3d011682016040523d82523d6000602084013e6106ef565b606091505b5091509150816040518060600160405280603c8152602001612bb6603c91399061072c5760405162461bcd60e51b81526004016106129190612a36565b50979650505050505050565b60015460009061010090046001600160a01b0316331461076a5760405162461bcd60e51b815260040161061290612a49565b600260005414156107bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610612565b6002600055816107ff5760405162461bcd60e51b815260206004820152600d60248201526c05f77616e74416d74203c3d203609c1b6044820152606401610612565b61080882611764565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108849190612912565b905061088e61180e565b600160005592915050565b60008060008060006108a9610a04565b94506108b3611106565b9350600191506108c1611192565b60045495969495600160a01b900460ff1694929350919050565b60015461010090046001600160a01b0316331461090a5760405162461bcd60e51b815260040161061290612a49565b6109146000611764565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612912565b905080156109af576009546109af906001600160a01b03163383611945565b50565b60015461010090046001600160a01b031633146109e15760405162461bcd60e51b815260040161061290612a49565b600154610a00906001600160a01b038481169161010090041683611945565b5050565b600654600a546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b90604401604080518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061292a565b5092915050565b60015460009061010090046001600160a01b03163314610ac75760405162461bcd60e51b815260040161061290612a49565b6000610ad1610a04565b9050610adc81610738565b9150610ae66119ad565b610aee61180e565b6040518281527fb20101a10c7cc8d4a9b5accf3d34c34f89d53ec195fce51620af16429526c7559060200160405180910390a15090565b60015461010090046001600160a01b03163314610b545760405162461bcd60e51b815260040161061290612a49565b610b5c611192565b610ba85760405162461bcd60e51b815260206004820152601960248201527f5661756c742063616e6e6f74206265206162616e646f6e6564000000000000006044820152606401610612565b6004805460ff60a01b1916600160a01b179055565b60015460009061010090046001600160a01b03163314610bef5760405162461bcd60e51b815260040161061290612a49565b60026000541415610c425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610612565b6002600055600454610c5f906001600160a01b0316333085611b31565b610c67611b6f565b50600160005590565b60015461010090046001600160a01b03163314610c9f5760405162461bcd60e51b815260040161061290612a49565b6001600160a01b038116610cf55760405162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420616464726573732073657420746f207a65726f0000000000006044820152606401610612565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60015461010090046001600160a01b03163314610d465760405162461bcd60e51b815260040161061290612a49565b6001600160a01b038516610d935760405162461bcd60e51b815260206004820152601460248201527314dc98c81d1bdad95b881a5cc81a5b9d985b1a5960621b6044820152606401610612565b6001600160a01b038416610de05760405162461bcd60e51b8152602060048201526014602482015273111cdd081d1bdad95b881a5cc81a5b9d985b1a5960621b6044820152606401610612565b836001600160a01b0316856001600160a01b03161415610e505760405162461bcd60e51b815260206004820152602560248201527f53726320746f6b656e206d75737420626520646966662066726f6d20447374206044820152643a37b5b2b760d91b6064820152608401610612565b6001600160a01b038316610e9a5760405162461bcd60e51b8152602060048201526011602482015270149bdd5d195c881a5cc81a5b9d985b1a59607a1b6044820152606401610612565b846001600160a01b031682826000818110610ec557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610eda9190612679565b6001600160a01b031614610f305760405162461bcd60e51b815260206004820152601f60248201527f526f757465206d75737420737461727420776974682073726320746f6b656e006044820152606401610612565b6001600160a01b0384168282610f47600182612b46565b818110610f6457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610f799190612679565b6001600160a01b031614610fcf5760405162461bcd60e51b815260206004820152601d60248201527f526f757465206d75737420656e6420776974682064737420746f6b656e0000006044820152606401610612565b60006040518060400160405280856001600160a01b0316815260200184848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250506001600160a01b038981168252600c602090815260408084208b841685528252909220845181546001600160a01b0319169216919091178155838201518051949550859491935061107892600185019291019061258b565b505050505050505050565b60015460ff16156110c55760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481a5b9a5d60a21b6044820152606401610612565b600280546001600160a01b0319166001600160a01b03929092169182179055600180546001600160a81b03191661010090920260ff19169190911781179055565b600654600a54604051634c4b4f4160e11b815260048101919091523060248201526000916001600160a01b0316906398969e829060440160206040518083038186803b15801561115557600080fd5b505afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190612912565b905090565b6009546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156111da57600080fd5b505afa1580156111ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112129190612912565b600480546040516370a0823160e01b81523092810192909252911592506000916001600160a01b0316906370a082319060240160206040518083038186803b15801561125d57600080fd5b505afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190612912565b15905060006112a2611106565b1590508280156112af5750815b80156112b85750805b935050505090565b6002546001600160a01b03163314806112e8575060015461010090046001600160a01b031633145b61132b5760405162461bcd60e51b815260206004820152601460248201527310b7bbb732b91013131010b430b93b32b9ba37b960611b6044820152606401610612565b6000611335610a04565b90506113416000611764565b6009546001600160a01b0316737ceb23fd6bc0add59e62ac25578270cff1b9f619141561137057611370611cf2565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156113b457600080fd5b505afa1580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ec9190612912565b6007546009549192506001600160a01b0391821691161461142e5760095460075461142e916001600160a01b039081169116611429600285612b07565b611d64565b6008546009546001600160a01b0390811691161461146857600954600854611468916001600160a01b039081169116611429600285612b07565b6007546008546040516370a0823160e01b81523060048201526001600160a01b03928316929091169060009083906370a082319060240160206040518083038186803b1580156114b757600080fd5b505afa1580156114cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ef9190612912565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b15801561153457600080fd5b505afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c9190612912565b905060008211801561157e5750600081115b156116a257600b5461159d906001600160a01b03868116911684611f31565b600b546115b7906001600160a01b03858116911683611f31565b600b54600754600854600d546001600160a01b039384169363e8e3370093811692169086908690600090819030906115ef9042612aef565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b15801561166657600080fd5b505af115801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e919061294d565b5050505b436003556116ae611b6f565b6116b66119ad565b60006116c0610a04565b905086811115611717576004546001600160a01b03167f053fa1fc52294a40b4ff1a988765bd298c00caa24d685cc3f767dcfde254ef9a6117018984612b46565b60405190815260200160405180910390a261175b565b600454604051600081526001600160a01b03909116907f053fa1fc52294a40b4ff1a988765bd298c00caa24d685cc3f767dcfde254ef9a9060200160405180910390a25b50505050505050565b600654600a54604051630441a3e760e41b81526001600160a01b039092169163441a3e70916117a0918590600401918252602082015260400190565b600060405180830381600087803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b505050507f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d8160405161180391815260200190565b60405180910390a150565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561185257600080fd5b505afa158015611866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188a9190612912565b905080156118a9576009546118a9906001600160a01b03163383611945565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156118f257600080fd5b505afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a9190612912565b90508015610a0057600454610a00906001600160a01b031633835b6040516001600160a01b0383166024820152604481018290526119a890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ff2565b505050565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156119f157600080fd5b505afa158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190612912565b6009546007549192506001600160a01b03918216911614801590611a4d5750600081115b15611a6f57600754600954611a6f916001600160a01b03908116911683611d64565b6008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb9190612912565b6009546008549192506001600160a01b03918216911614801590611b0f5750600081115b15610a0057600854600954610a00916001600160a01b03908116911683611d64565b6040516001600160a01b0380851660248301528316604482015260648101829052611b699085906323b872dd60e01b90608401611971565b50505050565b60015460ff16611ba95760405162461bcd60e51b8152602060048201526005602482015264085a5b9a5d60da1b6044820152606401610612565b600480546040516370a0823160e01b815230928101929092526001600160a01b03169060009082906370a082319060240160206040518083038186803b158015611bf257600080fd5b505afa158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a9190612912565b600654909150611c47906001600160a01b03848116911683611f31565b600654600a54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891611c83918590600401918252602082015260400190565b600060405180830381600087803b158015611c9d57600080fd5b505af1158015611cb1573d6000803e3d6000fd5b505050507f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea81604051611ce691815260200190565b60405180910390a15050565b4780156109af57737ceb23fd6bc0add59e62ac25578270cff1b9f6196001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d4857600080fd5b505af1158015611d5c573d6000803e3d6000fd5b505050505050565b80611d6e57505050565b600080611d7b85856120c4565b90925090506001600160a01b038216611dc65760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420726f75746560981b6044820152606401610612565b846001600160a01b031681600081518110611df157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614611e4f5760405162461bcd60e51b815260206004820152601f60248201527f526f757465206d75737420737461727420776974682073726320746f6b656e006044820152606401610612565b836001600160a01b03168160018351611e689190612b46565b81518110611e8657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614611ee45760405162461bcd60e51b815260206004820152601d60248201527f526f757465206d75737420656e6420776974682064737420746f6b656e0000006044820152606401610612565b611ef96001600160a01b038616836000612157565b611f0d6001600160a01b0386168385612157565b611f2a82846005548430600d5442611f259190612aef565b61227b565b5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611f7d57600080fd5b505afa158015611f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb59190612912565b611fbf9190612aef565b6040516001600160a01b038516602482015260448101829052909150611b6990859063095ea7b360e01b90606401611971565b6000612047826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124119092919063ffffffff16565b8051909150156119a8578080602001905181019061206591906128da565b6119a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610612565b6001600160a01b038083166000908152600c60209081526040808320858516845282529182902080546001820180548551818602810186019096528086529190951694606094929390919083018282801561214857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161212a575b50505050509150509250929050565b8015806121e05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156121a657600080fd5b505afa1580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190612912565b155b61224b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610612565b6040516001600160a01b0383166024820152604481018290526119a890849063095ea7b360e01b90606401611971565b825186906122bd5760405162461bcd60e51b815260206004820152600f60248201526e0d2dcecc2d8d2c8a6eec2e0a0c2e8d608b1b6044820152606401610612565b60405163d06ca61f60e01b81526000906001600160a01b0383169063d06ca61f906122ee908a908990600401612a69565b60006040518083038186803b15801561230657600080fd5b505afa15801561231a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123429190810190612832565b90506000620f42406123548882612b46565b83600185516123639190612b46565b8151811061238157634e487b7160e01b600052603260045260246000fd5b60200260200101516123939190612b27565b61239d9190612b07565b604051635c11d79560e01b81529091506001600160a01b03841690635c11d795906123d4908b9085908b908b908b90600401612a82565b600060405180830381600087803b1580156123ee57600080fd5b505af1158015612402573d6000803e3d6000fd5b50505050505050505050505050565b6060612420848460008561242a565b90505b9392505050565b60608247101561248b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610612565b843b6124d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610612565b600080866001600160a01b031685876040516124f59190612a1a565b60006040518083038185875af1925050503d8060008114612532576040519150601f19603f3d011682016040523d82523d6000602084013e612537565b606091505b5091509150612547828286612552565b979650505050505050565b60608315612561575081612423565b8251156125715782518084602001fd5b8160405162461bcd60e51b81526004016106129190612a36565b8280548282559060005260206000209081019282156125e0579160200282015b828111156125e057825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906125ab565b506125ec9291506125f0565b5090565b5b808211156125ec57600081556001016125f1565b600067ffffffffffffffff83111561261f5761261f612b9f565b612632601f8401601f1916602001612abe565b905082815283838301111561264657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461267457600080fd5b919050565b60006020828403121561268a578081fd5b6124238261265d565b600080604083850312156126a5578081fd5b6126ae8361265d565b91506126bc6020840161265d565b90509250929050565b6000806000806000608086880312156126dc578081fd5b6126e58661265d565b94506126f36020870161265d565b93506127016040870161265d565b9250606086013567ffffffffffffffff8082111561271d578283fd5b818801915088601f830112612730578283fd5b81358181111561273e578384fd5b8960208260051b8501011115612752578384fd5b9699959850939650602001949392505050565b60008060408385031215612777578182fd5b6127808361265d565b946020939093013593505050565b600080600080608085870312156127a3578384fd5b6127ac8561265d565b935060208501359250604085013567ffffffffffffffff808211156127cf578384fd5b818701915087601f8301126127e2578384fd5b6127f188833560208501612605565b93506060870135915080821115612806578283fd5b508501601f81018713612817578182fd5b61282687823560208401612605565b91505092959194509250565b60006020808385031215612844578182fd5b825167ffffffffffffffff8082111561285b578384fd5b818501915085601f83011261286e578384fd5b81518181111561288057612880612b9f565b8060051b9150612891848301612abe565b8181528481019084860184860187018a10156128ab578788fd5b8795505b838610156128cd5780518352600195909501949186019186016128af565b5098975050505050505050565b6000602082840312156128eb578081fd5b81518015158114612423578182fd5b60006020828403121561290b578081fd5b5035919050565b600060208284031215612923578081fd5b5051919050565b6000806040838503121561293c578182fd5b505080516020909101519092909150565b600080600060608486031215612961578283fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b838110156129b25781516001600160a01b03168752958201959082019060010161298d565b509495945050505050565b600081518084526129d5816020860160208601612b5d565b601f01601f19169290920160200192915050565b6001600160e01b0319831681528151600090612a0c816004850160208701612b5d565b919091016004019392505050565b60008251612a2c818460208701612b5d565b9190910192915050565b60208152600061242360208301846129bd565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b828152604060208201526000612420604083018461297a565b85815284602082015260a060408201526000612aa160a083018661297a565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612ae757612ae7612b9f565b604052919050565b60008219821115612b0257612b02612b89565b500190565b600082612b2257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b4157612b41612b89565b500290565b600082821015612b5857612b58612b89565b500390565b60005b83811015612b78578181015183820152602001612b60565b83811115611b695750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe44657646756e643a3a657865637574655472616e73616374696f6e3a205472616e73616374696f6e20657865637574696f6e2072657665727465642ea2646970667358221220286a1e5e313ee9f6d864b0857aec012d3a359bec6b5c1cba6e15a424a9f63dd064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 600,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5301,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5304,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5306,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "harvestor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5308,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "lastEarnBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5311,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "wantAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5314,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "abandoned",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 5317,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "slippage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5722,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "masterChef",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMasterChef)6700"
      },
      {
        "astId": 5724,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "token0",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5726,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "token1",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5728,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5730,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "poolId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5732,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5739,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "routes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5293_storage))"
      },
      {
        "astId": 5741,
        "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
        "label": "swapTimeout",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterChef)6700": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5293_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RouteInfo)5293_storage)"
      },
      "t_mapping(t_address,t_struct(RouteInfo)5293_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultBase.RouteInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RouteInfo)5293_storage"
      },
      "t_struct(RouteInfo)5293_storage": {
        "encoding": "inplace",
        "label": "struct VaultBase.RouteInfo",
        "members": [
          {
            "astId": 5289,
            "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5292,
            "contract": "contracts/Vault/BaoPG/VaultLP.sol:VaultLP",
            "label": "path",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}