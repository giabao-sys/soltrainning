{
  "version": "3.2",
  "log": [
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TATU": {
        "src": "contracts/ERC20/Tuan/TATU.sol:7",
        "version": {
          "withMetadata": "0806e18f06c2dd41f6b48e357c14761840000581a6550a82410a349e2c8177e6",
          "withoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22",
          "linkedWithoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22"
        },
        "inherit": [
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "setMinter(address)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TATU",
            "src": "contracts/ERC20/Tuan/TATU.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TATU",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:10"
            },
            {
              "contract": "TATU",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:11"
            },
            {
              "contract": "TATU",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/Tuan/TATU.sol:14"
            },
            {
              "contract": "TATU",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/Tuan/TATU.sol:15"
            },
            {
              "contract": "TATU",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/Tuan/TATU.sol:16"
            },
            {
              "contract": "TATU",
              "label": "_minter",
              "type": "t_address",
              "src": "contracts/ERC20/Tuan/TATU.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:32",
        "version": {
          "withMetadata": "5735d9088853b729a8f97bf00b86cba146407cb4bb242ff8e954cbf65c6e553d",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefBaoPG",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefBaoPG",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:61"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:63"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:65"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:67"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "migrator",
              "type": "t_contract(IMigratorChefBaoPG)3448",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:71"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3472_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:73"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:75"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChefBaoPG)3448": {
              "label": "contract IMigratorChefBaoPG"
            },
            "t_array(t_struct(PoolInfo)3472_storage)dyn_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo[]"
            },
            "t_struct(PoolInfo)3472_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefBaoPG.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3462_storage)": {
              "label": "mapping(address => struct MasterChefBaoPG.UserInfo)"
            },
            "t_struct(UserInfo)3462_storage": {
              "label": "struct MasterChefBaoPG.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:34",
        "version": {
          "withMetadata": "416756937ebd00d2341f3f431f6071ddfefc401b0cec021538aba43526c020e9",
          "withoutMetadata": "b168d8daa3b38459ecf4f8cbdea3eb509dd86554a0023306cfd75711b3723f6b",
          "linkedWithoutMetadata": "b168d8daa3b38459ecf4f8cbdea3eb509dd86554a0023306cfd75711b3723f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4351",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4375_storage)dyn_storage",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4365_storage))",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4351": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4375_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)4375_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4365_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4365_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)4365_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "9c79eb86238183b3dffae88fa8ded308ba55be451a4a4824237fc65bac8b8472",
          "withoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c",
          "linkedWithoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)6700",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5293_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)6700": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5293_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5293_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)5293_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TATU": {
        "src": "contracts/ERC20/Tuan/TATU.sol:7",
        "version": {
          "withMetadata": "0806e18f06c2dd41f6b48e357c14761840000581a6550a82410a349e2c8177e6",
          "withoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22",
          "linkedWithoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22"
        },
        "inherit": [
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "setMinter(address)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TATU",
            "src": "contracts/ERC20/Tuan/TATU.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TATU",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:10"
            },
            {
              "contract": "TATU",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:11"
            },
            {
              "contract": "TATU",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/Tuan/TATU.sol:14"
            },
            {
              "contract": "TATU",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/Tuan/TATU.sol:15"
            },
            {
              "contract": "TATU",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/Tuan/TATU.sol:16"
            },
            {
              "contract": "TATU",
              "label": "_minter",
              "type": "t_address",
              "src": "contracts/ERC20/Tuan/TATU.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:32",
        "version": {
          "withMetadata": "5735d9088853b729a8f97bf00b86cba146407cb4bb242ff8e954cbf65c6e553d",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefBaoPG",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefBaoPG",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:61"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:63"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:65"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:67"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "migrator",
              "type": "t_contract(IMigratorChefBaoPG)3448",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:71"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3472_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:73"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:75"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChefBaoPG)3448": {
              "label": "contract IMigratorChefBaoPG"
            },
            "t_array(t_struct(PoolInfo)3472_storage)dyn_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo[]"
            },
            "t_struct(PoolInfo)3472_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefBaoPG.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3462_storage)": {
              "label": "mapping(address => struct MasterChefBaoPG.UserInfo)"
            },
            "t_struct(UserInfo)3462_storage": {
              "label": "struct MasterChefBaoPG.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:31",
        "version": {
          "withMetadata": "1a8f05db2eff34f372ec06d8036c97c1921c81f71eafc33b7ac98833f3b6c70e",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:60"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:62"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:64"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:66"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4350",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:70"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4374_storage)dyn_storage",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:72"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:74"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:78"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4350": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4374_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)4374_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4364_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)4364_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "9c79eb86238183b3dffae88fa8ded308ba55be451a4a4824237fc65bac8b8472",
          "withoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c",
          "linkedWithoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)6662",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)6662": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5255_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)5255_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TATU": {
        "src": "contracts/ERC20/Tuan/TATU.sol:7",
        "version": {
          "withMetadata": "0806e18f06c2dd41f6b48e357c14761840000581a6550a82410a349e2c8177e6",
          "withoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22",
          "linkedWithoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22"
        },
        "inherit": [
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "setMinter(address)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TATU",
            "src": "contracts/ERC20/Tuan/TATU.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TATU",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:10"
            },
            {
              "contract": "TATU",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:11"
            },
            {
              "contract": "TATU",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/Tuan/TATU.sol:14"
            },
            {
              "contract": "TATU",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/Tuan/TATU.sol:15"
            },
            {
              "contract": "TATU",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/Tuan/TATU.sol:16"
            },
            {
              "contract": "TATU",
              "label": "_minter",
              "type": "t_address",
              "src": "contracts/ERC20/Tuan/TATU.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:32",
        "version": {
          "withMetadata": "5735d9088853b729a8f97bf00b86cba146407cb4bb242ff8e954cbf65c6e553d",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefBaoPG",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefBaoPG",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:61"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:63"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:65"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:67"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "migrator",
              "type": "t_contract(IMigratorChefBaoPG)3448",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:71"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3472_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:73"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:75"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChefBaoPG)3448": {
              "label": "contract IMigratorChefBaoPG"
            },
            "t_array(t_struct(PoolInfo)3472_storage)dyn_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo[]"
            },
            "t_struct(PoolInfo)3472_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefBaoPG.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3462_storage)": {
              "label": "mapping(address => struct MasterChefBaoPG.UserInfo)"
            },
            "t_struct(UserInfo)3462_storage": {
              "label": "struct MasterChefBaoPG.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:31",
        "version": {
          "withMetadata": "cb67faef69471d21fc74f4ec601764ef4e181fcb8082ae0888163538e370311b",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:60"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:62"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:64"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:66"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4350",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:70"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4374_storage)dyn_storage",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:72"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:74"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:78"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4350": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4374_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)4374_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4364_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)4364_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "9c79eb86238183b3dffae88fa8ded308ba55be451a4a4824237fc65bac8b8472",
          "withoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c",
          "linkedWithoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)6662",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)6662": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5255_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)5255_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TATU": {
        "src": "contracts/ERC20/Tuan/TATU.sol:7",
        "version": {
          "withMetadata": "0806e18f06c2dd41f6b48e357c14761840000581a6550a82410a349e2c8177e6",
          "withoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22",
          "linkedWithoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22"
        },
        "inherit": [
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "setMinter(address)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TATU",
            "src": "contracts/ERC20/Tuan/TATU.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TATU",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:10"
            },
            {
              "contract": "TATU",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:11"
            },
            {
              "contract": "TATU",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/Tuan/TATU.sol:14"
            },
            {
              "contract": "TATU",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/Tuan/TATU.sol:15"
            },
            {
              "contract": "TATU",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/Tuan/TATU.sol:16"
            },
            {
              "contract": "TATU",
              "label": "_minter",
              "type": "t_address",
              "src": "contracts/ERC20/Tuan/TATU.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:32",
        "version": {
          "withMetadata": "5735d9088853b729a8f97bf00b86cba146407cb4bb242ff8e954cbf65c6e553d",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefBaoPG",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefBaoPG",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:61"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:63"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:65"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:67"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "migrator",
              "type": "t_contract(IMigratorChefBaoPG)3448",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:71"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3472_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:73"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:75"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:77"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChefBaoPG.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChefBaoPG)3448": {
              "label": "contract IMigratorChefBaoPG"
            },
            "t_array(t_struct(PoolInfo)3472_storage)dyn_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo[]"
            },
            "t_struct(PoolInfo)3472_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefBaoPG.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3462_storage)": {
              "label": "mapping(address => struct MasterChefBaoPG.UserInfo)"
            },
            "t_struct(UserInfo)3462_storage": {
              "label": "struct MasterChefBaoPG.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:31",
        "version": {
          "withMetadata": "f6f04097b43f03f72f7a63922a7cdd0d775bed0a0ccab3f6128a28bf4fcc8348",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(TATU)3428",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:60"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:62"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:64"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:66"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4350",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:70"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4374_storage)dyn_storage",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:72"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:74"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:78"
            }
          ],
          "types": {
            "t_contract(TATU)3428": {
              "label": "contract TATU"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4350": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4374_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)4374_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4364_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)4364_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "9c79eb86238183b3dffae88fa8ded308ba55be451a4a4824237fc65bac8b8472",
          "withoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c",
          "linkedWithoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)6662",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)6662": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5255_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)5255_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TATU": {
        "src": "contracts/ERC20/Tuan/TATU.sol:7",
        "version": {
          "withMetadata": "0806e18f06c2dd41f6b48e357c14761840000581a6550a82410a349e2c8177e6",
          "withoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22",
          "linkedWithoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22"
        },
        "inherit": [
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "setMinter(address)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TATU",
            "src": "contracts/ERC20/Tuan/TATU.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TATU",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:10"
            },
            {
              "contract": "TATU",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:11"
            },
            {
              "contract": "TATU",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/Tuan/TATU.sol:14"
            },
            {
              "contract": "TATU",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/Tuan/TATU.sol:15"
            },
            {
              "contract": "TATU",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/Tuan/TATU.sol:16"
            },
            {
              "contract": "TATU",
              "label": "_minter",
              "type": "t_address",
              "src": "contracts/ERC20/Tuan/TATU.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChefBaoPG": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "a2ad48500cf73205cf4f3aa6d73d63dc711943abe7f94c9d5f288f37e47b227c",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefBaoPG",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefBaoPG",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "migrator",
              "type": "t_contract(IMigratorChefBaoPG)3448",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3472_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChefBaoPG",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChefBaoPG)3448": {
              "label": "contract IMigratorChefBaoPG"
            },
            "t_array(t_struct(PoolInfo)3472_storage)dyn_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo[]"
            },
            "t_struct(PoolInfo)3472_storage": {
              "label": "struct MasterChefBaoPG.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3462_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefBaoPG.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3462_storage)": {
              "label": "mapping(address => struct MasterChefBaoPG.UserInfo)"
            },
            "t_struct(UserInfo)3462_storage": {
              "label": "struct MasterChefBaoPG.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:31",
        "version": {
          "withMetadata": "f6f04097b43f03f72f7a63922a7cdd0d775bed0a0ccab3f6128a28bf4fcc8348",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(TATU)3428",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:60"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:62"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:64"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:66"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4350",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:70"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4374_storage)dyn_storage",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:72"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:74"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:78"
            }
          ],
          "types": {
            "t_contract(TATU)3428": {
              "label": "contract TATU"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4350": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4374_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)4374_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4364_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)4364_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "9c79eb86238183b3dffae88fa8ded308ba55be451a4a4824237fc65bac8b8472",
          "withoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c",
          "linkedWithoutMetadata": "ae5f0d3b72148fd16c289c4b0eb6a1d6ab63a915e5292dcc9113cc6dd84b650c"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)6662",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)6662": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5255_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)5255_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TATU": {
        "src": "contracts/ERC20/Tuan/TATU.sol:7",
        "version": {
          "withMetadata": "0806e18f06c2dd41f6b48e357c14761840000581a6550a82410a349e2c8177e6",
          "withoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22",
          "linkedWithoutMetadata": "5c6e528dec3ca47088d416b6fc740e33677c710f5bfbb7cb402ff6821f748e22"
        },
        "inherit": [
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "setMinter(address)",
          "mint(address,uint256)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TATU",
            "src": "contracts/ERC20/Tuan/TATU.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TATU",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:10"
            },
            {
              "contract": "TATU",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/Tuan/TATU.sol:11"
            },
            {
              "contract": "TATU",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/Tuan/TATU.sol:14"
            },
            {
              "contract": "TATU",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/Tuan/TATU.sol:15"
            },
            {
              "contract": "TATU",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/Tuan/TATU.sol:16"
            },
            {
              "contract": "TATU",
              "label": "_minter",
              "type": "t_address",
              "src": "contracts/ERC20/Tuan/TATU.sol:18"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/Tuan/MasterChef.sol:31",
        "version": {
          "withMetadata": "f6f04097b43f03f72f7a63922a7cdd0d775bed0a0ccab3f6128a28bf4fcc8348",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(TATU)3428",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:60"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:62"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:64"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:66"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4350",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:70"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4374_storage)dyn_storage",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:72"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:74"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:76"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/Tuan/MasterChef.sol:78"
            }
          ],
          "types": {
            "t_contract(TATU)3428": {
              "label": "contract TATU"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4350": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4374_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)4374_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4364_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4364_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)4364_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "0508e41da5a87d49034f1d57f35c36d1bf2724e16fe62cc3a352cab3bd0f5e10",
          "withoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4",
          "linkedWithoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)6675",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)6675": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5255_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5255_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)5255_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "bb48c67c04346c92c1916e1803eedf53872b658486a0c90a0f50d15f8a38ac4d",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "0508e41da5a87d49034f1d57f35c36d1bf2724e16fe62cc3a352cab3bd0f5e10",
          "withoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4",
          "linkedWithoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5408",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5408": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)3988_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)3988_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "f1e875fa5e7e5582931c2dcc113ec9705fc52867c3fa5b509cbfbe75e1623dde",
          "withoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c",
          "linkedWithoutMetadata": "5faf7e3b787e09ccb267b002b189a84b1a9bc14e6256bf14be08580d64df637c"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "bb48c67c04346c92c1916e1803eedf53872b658486a0c90a0f50d15f8a38ac4d",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "775f62f6823fc5f75a57151d6bf422b1b47618a683281e14f400ec2466ccd75e",
          "withoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4",
          "linkedWithoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5408",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5408": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)3988_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)3988_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "775f62f6823fc5f75a57151d6bf422b1b47618a683281e14f400ec2466ccd75e",
          "withoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4",
          "linkedWithoutMetadata": "cbea38d300da9984b41e8cd0c9356b274d323cab12b9e628e2804cc0a1618be4"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5408",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5408": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)3988_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)3988_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Router": {
        "src": "contracts/Vault/BaoPG/Router.sol:8",
        "version": {
          "withMetadata": "fbe04b9f55812475d76f6c6d75c294a229181764d724e0bea39800d881be298a",
          "withoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17",
          "linkedWithoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IRouter"
        ],
        "libraries": [],
        "methods": [
          "addRoute(address,address,address,address[])",
          "removeRoute(address,address)",
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Router",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5584_storage))",
              "src": "contracts/Vault/BaoPG/Router.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5584_storage))": {
              "label": "mapping(address => mapping(address => struct IRouter.RouteInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5584_storage)": {
              "label": "mapping(address => struct IRouter.RouteInfo)"
            },
            "t_struct(RouteInfo)5584_storage": {
              "label": "struct IRouter.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "8975febedbb55f400f44df4e0bfa379712b7a8b0cef4790f42b0cb263bde5b31",
          "withoutMetadata": "8665d3b9d33c054bd7f7aefb5c09d9db61cd60875aba2fc9ef0832a7b3a4539d",
          "linkedWithoutMetadata": "8665d3b9d33c054bd7f7aefb5c09d9db61cd60875aba2fc9ef0832a7b3a4539d"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5576",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5576": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)4156_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)4156_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "addRoute(address,address,address,address[])",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Router": {
        "src": "contracts/Vault/BaoPG/Router.sol:8",
        "version": {
          "withMetadata": "fbe04b9f55812475d76f6c6d75c294a229181764d724e0bea39800d881be298a",
          "withoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17",
          "linkedWithoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IRouter"
        ],
        "libraries": [],
        "methods": [
          "addRoute(address,address,address,address[])",
          "removeRoute(address,address)",
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Router",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5583_storage))",
              "src": "contracts/Vault/BaoPG/Router.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5583_storage))": {
              "label": "mapping(address => mapping(address => struct IRouter.RouteInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5583_storage)": {
              "label": "mapping(address => struct IRouter.RouteInfo)"
            },
            "t_struct(RouteInfo)5583_storage": {
              "label": "struct IRouter.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "8f71128b14dd835a63c44866d947a6b3e1f2b341aa331fb3c117404ae667aef0",
          "withoutMetadata": "8665d3b9d33c054bd7f7aefb5c09d9db61cd60875aba2fc9ef0832a7b3a4539d",
          "linkedWithoutMetadata": "8665d3b9d33c054bd7f7aefb5c09d9db61cd60875aba2fc9ef0832a7b3a4539d"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "addRoute(address,address,address,address[])",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5575",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5575": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)4156_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)4156_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Router": {
        "src": "contracts/Vault/BaoPG/Router.sol:8",
        "version": {
          "withMetadata": "fbe04b9f55812475d76f6c6d75c294a229181764d724e0bea39800d881be298a",
          "withoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17",
          "linkedWithoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IRouter"
        ],
        "libraries": [],
        "methods": [
          "addRoute(address,address,address,address[])",
          "removeRoute(address,address)",
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Router",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5637_storage))",
              "src": "contracts/Vault/BaoPG/Router.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5637_storage))": {
              "label": "mapping(address => mapping(address => struct IRouter.RouteInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5637_storage)": {
              "label": "mapping(address => struct IRouter.RouteInfo)"
            },
            "t_struct(RouteInfo)5637_storage": {
              "label": "struct IRouter.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "f78b868c9f488b1e45ce62e06684c89ca5246d95774147fbde8b5c6baebb0f96",
          "withoutMetadata": "c8b03510fa3344d16fa62e40983b6f8a74764e7c92804b19f34d021ced557fa4",
          "linkedWithoutMetadata": "c8b03510fa3344d16fa62e40983b6f8a74764e7c92804b19f34d021ced557fa4"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,address)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()",
          "syncSwapRoutes()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5629",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            },
            {
              "contract": "VaultLP",
              "label": "path0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:190"
            },
            {
              "contract": "VaultLP",
              "label": "path1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:191"
            },
            {
              "contract": "VaultLP",
              "label": "spath0",
              "type": "t_string_storage",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:192"
            },
            {
              "contract": "VaultLP",
              "label": "spath1",
              "type": "t_string_storage",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:193"
            },
            {
              "contract": "VaultLP",
              "label": "pathlength",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:194"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5629": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)4156_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)4156_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Router": {
        "src": "contracts/Vault/BaoPG/Router.sol:8",
        "version": {
          "withMetadata": "fbe04b9f55812475d76f6c6d75c294a229181764d724e0bea39800d881be298a",
          "withoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17",
          "linkedWithoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IRouter"
        ],
        "libraries": [],
        "methods": [
          "addRoute(address,address,address,address[])",
          "removeRoute(address,address)",
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Router",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5638_storage))",
              "src": "contracts/Vault/BaoPG/Router.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5638_storage))": {
              "label": "mapping(address => mapping(address => struct IRouter.RouteInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5638_storage)": {
              "label": "mapping(address => struct IRouter.RouteInfo)"
            },
            "t_struct(RouteInfo)5638_storage": {
              "label": "struct IRouter.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultBase",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "53470cb7a4ad76afe20094eeb4100e5d145e6dec09538fdfd53e5baa4e798c14",
          "withoutMetadata": "5c0712eaca752a497d17ca6c1f68e29468fb4887698c6c5b2f52a74511f43a56",
          "linkedWithoutMetadata": "5c0712eaca752a497d17ca6c1f68e29468fb4887698c6c5b2f52a74511f43a56"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,address)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()",
          "syncSwapRoutes()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5630",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5630": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)4156_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)4156_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Router": {
        "src": "contracts/Vault/BaoPG/Router.sol:8",
        "version": {
          "withMetadata": "fbe04b9f55812475d76f6c6d75c294a229181764d724e0bea39800d881be298a",
          "withoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17",
          "linkedWithoutMetadata": "acb840e7aefe24443c9482425c054822bed49b89217f908bdc16c4b3b6aabb17"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IRouter"
        ],
        "libraries": [],
        "methods": [
          "addRoute(address,address,address,address[])",
          "removeRoute(address,address)",
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Router",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5635_storage))",
              "src": "contracts/Vault/BaoPG/Router.sol:9"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)5635_storage))": {
              "label": "mapping(address => mapping(address => struct IRouter.RouteInfo))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(RouteInfo)5635_storage)": {
              "label": "mapping(address => struct IRouter.RouteInfo)"
            },
            "t_struct(RouteInfo)5635_storage": {
              "label": "struct IRouter.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address,address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "6440388f8fd5a9de339e7e21fdb61c8d2b7188ca186d42b03392907307b8fc60",
          "withoutMetadata": "9f2f84a89e423331fb406c275139eb07442f88edd071f5709f04b456ff7b00c8",
          "linkedWithoutMetadata": "9f2f84a89e423331fb406c275139eb07442f88edd071f5709f04b456ff7b00c8"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()",
          "syncSwapRoutes()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5627",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5627": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)4156_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)4156_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)4156_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address,address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "1323fac2d943cb048093a9301562cecf58c6012c30aa36169de4f221b48595fc",
          "withoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed",
          "linkedWithoutMetadata": "1b8b57712d277ccd587882f5a4c493c923ad7453e1484f95e9f3caa30d8640ed"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "rewardToken()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)3063",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3083",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3107_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)3063": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3083": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3107_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3107_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1253"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1253": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3097_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3097_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3097_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address,address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "swapRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultIronLP": {
        "src": "contracts/Vault/BaoPG/VaultLP.sol:15",
        "version": {
          "withMetadata": "314e8b349c8192f9ad55715a610e894641fcb7d6262245120ba5a03af7cf143a",
          "withoutMetadata": "9c6b9a69bae9dcc648a00534a41125b0d0fa575fb9f1c7fed0d0bb6abff08694",
          "linkedWithoutMetadata": "9c6b9a69bae9dcc648a00534a41125b0d0fa575fb9f1c7fed0d0bb6abff08694"
        },
        "inherit": [
          "VaultBase",
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "balanceInFarm()",
          "pending()",
          "canAbandon()",
          "info()",
          "compound()",
          "deposit(uint256)",
          "withdrawAll()",
          "withdraw(uint256)",
          "claimRewards()",
          "abandon()",
          "syncSwapRoutes()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultIronLP",
            "src": "contracts/Vault/BaoPG/VaultLP.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultIronLP",
              "label": "masterChef",
              "type": "t_contract(IMasterChef)5459",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:18"
            },
            {
              "contract": "VaultIronLP",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:19"
            },
            {
              "contract": "VaultIronLP",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:20"
            },
            {
              "contract": "VaultIronLP",
              "label": "rewardToken",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:21"
            },
            {
              "contract": "VaultIronLP",
              "label": "poolId",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:22"
            },
            {
              "contract": "VaultIronLP",
              "label": "liquidityRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:23"
            },
            {
              "contract": "VaultIronLP",
              "label": "routes",
              "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:25"
            },
            {
              "contract": "VaultIronLP",
              "label": "swapTimeout",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultLP.sol:27"
            }
          ],
          "types": {
            "t_contract(IMasterChef)5459": {
              "label": "contract IMasterChef"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_struct(RouteInfo)3988_storage))": {
              "label": "mapping(address => mapping(address => struct VaultBase.RouteInfo))"
            },
            "t_mapping(t_address,t_struct(RouteInfo)3988_storage)": {
              "label": "mapping(address => struct VaultBase.RouteInfo)"
            },
            "t_struct(RouteInfo)3988_storage": {
              "label": "struct VaultBase.RouteInfo",
              "members": [
                {
                  "label": "router",
                  "type": "t_address"
                },
                {
                  "label": "path",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMasterChef": {
        "src": "contracts/Vault/BaoPG/interfaces/IMasterChef.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "pendingReward(uint256,address)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "rewardToken()",
          "add(uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address,address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "789080525187a3e480569c28faeceb22f2aefd06550f9bfd80c853957c417570",
          "withoutMetadata": "03a9a36b031382c008df81c8047618bc49511afaf8aa064896656fa9ec574b82",
          "linkedWithoutMetadata": "03a9a36b031382c008df81c8047618bc49511afaf8aa064896656fa9ec574b82"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingSushi(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)2897",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)2917",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2941_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2931_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)2897": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)2917": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)2941_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)2941_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1087"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1087": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2931_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2931_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)2931_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VaultBase": {
        "src": "contracts/Vault/BaoPG/VaultBase.sol:14",
        "inherit": [
          "ReentrancyGuard",
          "IVault"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "initialize(address,address)",
          "canAbandon()",
          "info()",
          "getRouter()",
          "updateSlippage(uint256)",
          "setHarvestor(address)",
          "abandon()",
          "claimRewards()",
          "rescueFund(address,uint256)",
          "executeTransaction(address,uint256,string,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultBase",
              "label": "initialized",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:26"
            },
            {
              "contract": "VaultBase",
              "label": "swapRouter",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:29"
            },
            {
              "contract": "VaultBase",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:30"
            },
            {
              "contract": "VaultBase",
              "label": "harvestor",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:31"
            },
            {
              "contract": "VaultBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:32"
            },
            {
              "contract": "VaultBase",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:33"
            },
            {
              "contract": "VaultBase",
              "label": "abandoned",
              "type": "t_bool",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:34"
            },
            {
              "contract": "VaultBase",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Vault/BaoPG/VaultBase.sol:35"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRouter": {
        "src": "contracts/Vault/BaoPG/interfaces/IRouter.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getSwapRoute(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router": {
        "src": "contracts/Vault/BaoPG/interfaces/IUniswapV2Router.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WBNB()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNB(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityBNBSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForBNBSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactBNBForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)",
          "swapBNBForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/Vault/BaoPG/interfaces/IVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "wantAddress()",
          "balanceInFarm()",
          "pending()",
          "abandoned()",
          "initialize(address,address)",
          "compound()",
          "abandon()",
          "claimRewards()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "withdrawAll()",
          "updateSlippage(uint256)",
          "rescueFund(address,uint256)",
          "canAbandon()",
          "info()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/Vault/BaoPG/interfaces/IWETH.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "43c69fd1204909695f73be1f51f61931c927772b5c86d9e449d3250d0bc67c6e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "f8e1bed8003ada20e9213743af745475cad28a49f01ada11f1ae5b065f7eac61",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f8a437e1e23a1837d0cd4ec9bba02d01e53172cfb1cd3972ffe4803fba07a368",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "314bfe57e60a556a9fe3c762c2383ebae5359951101dc0f600883ff84347087b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "4c5b194d2ca4217523db87c516ec708be24610eeea9872d511b5453ba7e497b5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:30",
        "version": {
          "withMetadata": "d35befd15f65bad7c22523230d83e4f82b396eb938980b9bed9f6699373e2b46",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleERC20": {
        "src": "contracts/ERC20/BaoPG/ERC20.sol:7",
        "version": {
          "withMetadata": "756510179a4f009370448573d2d1069953d5ad37d45b72f24a8313b62c771160",
          "withoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9",
          "linkedWithoutMetadata": "07197a7970fafffb7b12c872e14bcb02629aaea12d84fdde26c40dbdded772e9"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string,uint256)",
          "setMinter(address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleERC20",
            "src": "contracts/ERC20/BaoPG/ERC20.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleERC20",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:10"
            },
            {
              "contract": "SimpleERC20",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:11"
            },
            {
              "contract": "SimpleERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:14"
            },
            {
              "contract": "SimpleERC20",
              "label": "minter",
              "type": "t_address",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:16"
            },
            {
              "contract": "SimpleERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:18"
            },
            {
              "contract": "SimpleERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/ERC20/BaoPG/ERC20.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef/BaoPG/MasterChef.sol:32",
        "version": {
          "withMetadata": "789080525187a3e480569c28faeceb22f2aefd06550f9bfd80c853957c417570",
          "withoutMetadata": "03a9a36b031382c008df81c8047618bc49511afaf8aa064896656fa9ec574b82",
          "linkedWithoutMetadata": "03a9a36b031382c008df81c8047618bc49511afaf8aa064896656fa9ec574b82"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "pendingSushi(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "dev(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChef",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "sushi",
              "type": "t_contract(SimpleERC20)2857",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:61"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:63"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:65"
            },
            {
              "contract": "MasterChef",
              "label": "sushiPerDay",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:67"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)2877",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)2901_storage)dyn_storage",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2891_storage))",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef/BaoPG/MasterChef.sol:79"
            }
          ],
          "types": {
            "t_contract(SimpleERC20)2857": {
              "label": "contract SimpleERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)2877": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)2901_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)2901_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1047"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256"
                },
                {
                  "label": "accSushiPerShare",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1047": {
              "label": "contract IERC20"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2891_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)2891_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)2891_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}